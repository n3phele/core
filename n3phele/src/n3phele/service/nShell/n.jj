

options {
  STATIC=false;
}



PARSER_BEGIN(NParser)
/**
 * (C) Copyright 2010-2013. Nigel Cook. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 * 
 * Licensed under the terms described in LICENSE file that accompanied this code, (the "License"); you may not use this file
 * except in compliance with the License. 
 * 
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on 
 *  an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the 
 *  specific language governing permissions and limitations under the License.
 */

package n3phele.service.nShell;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;

import n3phele.service.model.Command;
import n3phele.service.model.CommandImplementationDefinition;
import n3phele.service.model.FileSpecification;
import n3phele.service.model.core.ParameterType;
import n3phele.service.model.core.TypedParameter;

public class NParser {
	public NParser(FileInputStream s)
	{
		this(new BlockStreamer(s));
	}

	public NParser(org.apache.commons.fileupload.FileItemStream item) throws IOException {
                this(new BlockStreamer(item.openStream()));
    }
}
/*
* BlockStream must be applied to input streams sent to the parser for correct operation. The grammar processing
* relies on its pre-treatment. In particular:
* 	- \r characters are removed from the raw input stream
*	- The \n character prior to non-indented text is changed to a \r\n sequence  
*/
class BlockStreamer extends InputStream {
	InputStream stream;
	Integer lookahead = null;
	boolean nextIsNL = false;
	public BlockStreamer(InputStream stream) {
		this.stream = stream;
	}
	
	@Override
	public int read() throws IOException {
		if(nextIsNL) {
			nextIsNL = false;
			return '\n';
		}
		int c;
		if(lookahead != null) {
			c = lookahead;
			lookahead = null;
		} else {
			c = stream.read();
		}

		if (c == -1) {
		    return -1;
		}
		if(c == '\r')
			return read();
		if(c == '\n') {
			while((lookahead = stream.read()) == '\r') ;
			if(lookahead == ' ' || lookahead == '\t' || lookahead == '\n' ) {
				return '\n';
			} else {
				nextIsNL = true;
				return '\r';
			}
		} 

		return c;
	}
	
	@Override
	public void close() throws IOException {
		stream.close();
	}

}


PARSER_END(NParser)

SKIP : {
  	" "
  	| "\t"
  	| "\n"
  	| "\r"
  	|  < "#" (~["\n", "\r"])* >
}

< DEFAULT,simpleValueProcessing,descriptionValueProcessing,blockProcessing,cloudProcessing >
TOKEN :
{
	<  COLON: (<WHITESPACE>)* ":" (<WHITESPACE>)* >
}


TOKEN :
{	
    < NAME: "name" > : simpleValueProcessing
  | < DESCRIPTION: "description" > : descriptionValueProcessing
  | < VERSION: "version" > : simpleValueProcessing
  | < PREFERRED: "preferred" >
  | < PUBLIC: "public" >
  | < ICON: "icon" >
  | < INPUT: "input files" > : blockProcessing
  | < OUTPUT: "output files" > : blockProcessing
  | < PARAMETERS: "parameters"> : blockProcessing
}

< blockProcessing >
SKIP :
{
     "\n"
  |  "\t"
  |  " "
  | "\r\n" : DEFAULT
}

< blockProcessing >
TOKEN :
{
	< COMMENT: (<WHITESPACE>)* "#" (<WHITESPACE>)* (~["\r","\n"])* >
	{ 
		matchedToken.image = image.toString();
		int i = matchedToken.image.indexOf("#");
		matchedToken.image = matchedToken.image.substring(i+1).trim();
	}
  | <#WHITESPACE: " " | "\t" >
}

<blockProcessing>
TOKEN :
{
  < OPTIONAL: "optional" >
}

< blockProcessing >
TOKEN :
{
	<INT: "int" | "long" > 
  | <FLOAT: "float" | "double" >
  | <STRING: "string" >
  | <SECRET: "secret" >
  | <BOOLEAN: "boolean" > 
}

< blockProcessing >
TOKEN :
{
  <EQUALS: "=" > 
}

< blockProcessing, DEFAULT >
TOKEN :
{
	 <INTEGER_LITERAL: <DECIMAL_LITERAL> | <HEX_LITERAL> | <OCTAL_LITERAL> >
	|  <#DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])*>
	|  <#HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+>
	|  <#OCTAL_LITERAL: "0" (["0"-"7"])*>
	|  <FLOATING_POINT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])? | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])? | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])? | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]>
	|  <#EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+>
	|  <BOOLEAN_LITERAL:  "true" | "false" | "True" | "False" >
	|  <STRING_LITERAL: "\"" (   ~["\"","\\","\n","\r"]
							   | "\\" ( ["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])?  | ["0"-"3"] ["0"-"7"] ["0"-"7"] )
							 )* "\""> { matchedToken.image = image.toString() ;
										matchedToken.image = n3phele.service.n.helpers.StringEscapeUtils.unescapeJavaString(matchedToken.image.substring(1,matchedToken.image.length()-1)); }
    | < URI_LITERAL: ("http" | "https")"://"((["a"-"z","A"-"Z","0"-"9","-",".","_"])+(":"(["0"-"9"])+)?(("/")?(["a"-"z","A"-"Z","0"-"9","-",".","_","~","!","$","&","'","(",")","*","+",",",";","=",":","/"])+)+) >   

}
< blockProcessing >
TOKEN :
{
  <VARIABLE_NAME: < NAMESTART > (< NAMEREST >)* > 
  |  <#NAMESTART: ["A"-"Z","_","a"-"z"]>
  |  <#NAMEREST: ["A"-"Z","a"-"z","0"-"9","_"]>
}

< blockProcessing >
TOKEN :
{
	< FILESPEC: <FILESTART> (<FILEREST>)* >
	|  <#FILESTART: ["A"-"Z","a"-"z","0"-"9","_","-","."]>
	|  <#FILEREST: ["A"-"Z","a"-"z","0"-"9","_","-",".","/"]> 
}




< simpleValueProcessing >
TOKEN : {
   <VALUE: (<VALUESTART>)+ ((" ")? <VALUESTART>)* > : DEFAULT
 | <#VALUESTART: ["A"-"Z","a"-"z","0"-"9","_","."] >
}

< descriptionValueProcessing >
SKIP : {
	 < ([" ", "\t"])* (["\n", "\r"])+ ([" ", "\t"])+ >
  |  < (" " | "\t")* (["\n", "\r"])+ > : DEFAULT  
}


< descriptionValueProcessing >
TOKEN : {
	 <DESCRIPTIONTEXT: (~["\r","\n"," ","\t",":"])+ ((" " | "\t")+ (~["\r","\n", " ", "\t"])+)* >
}

< bodyProcessing >
SKIP :
{
   < ([" ", "\t"])* "#" ([" ", "\t"])* > : commentProcessing
 | "\n" : DEFAULT
 | "\r"
}

< commentProcessing >
TOKEN :
{
	<BODY_COMMENT: (~["\n", "\r"])* > : bodyProcessing
}

TOKEN:
{
< CLOUDNAME: <CLOUDSTART> (<CLOUDMORE>)* > : cloudProcessing
  | <#CLOUDSTART: ["A"-"Z","a"-"z"] >
  | <#CLOUDMORE: ["A"-"Z","a"-"z","0"-"9","_","-"] >
}


< cloudProcessing >
SKIP :
{
   < ([" ", "\t"])* "#" ([" ", "\t"])* > : annotationProcessing
 | "\n" : cloudBodyProcessing
}

< cloudProcessing,cloudBodyProcessing >
TOKEN :
{	< END: "\r\n" > : DEFAULT 
}

< cloudBodyProcessing >
TOKEN :
{	< IMPLEMENTATION : (~["\r"])+ >
	{
	    matchedToken.image = image.toString()+"\n";
	} 
}

< annotationProcessing >
TOKEN :
{	< ANNOTATION: ( ~["\r", "\n"] )* >	{
	    matchedToken.image = image.toString();
	    if(matchedToken.image != null)
	    	matchedToken.image = matchedToken.image.trim();	} : cloudProcessing
}


Command parse():
{ 	
	String name = null;
	String description = null;
	String version = "";
	boolean preferred = false;
	boolean isPublic = false;
	URI icon = null;
	List<TypedParameter> parameters = null;
	List<FileSpecification> inputFiles = null;
	List<FileSpecification> outputFiles = null;
	List<CommandImplementationDefinition> implementations = null;
}
{
  	name = name()
  	description = description()
  	version = version()
  	preferred = preferred()
  	[ isPublic = isPublic() ]
  	[ icon = icon() ]
  	[ parameters = parameters() ]
  	[ inputFiles = inputFiles() ]
  	[ outputFiles = outputFiles() ]
  	[ implementations = implementations() ]
  	 <EOF >
  	{
		Command cd = new Command();
		cd.setShell("NShell");
		cd.setName(name);
		cd.setDescription(description);
		cd.setVersion(version);
		cd.setPreferred(preferred);
		cd.setPublic(isPublic);
		cd.setIcon(icon);
		cd.setExecutionParameters(parameters);
		cd.setInputFiles(inputFiles);
		cd.setOutputFiles(outputFiles);
		cd.setImplementations(implementations);
		if(implementations != null)
		return cd;
  	}
}

String name() : { Token name; }
{
	<NAME> <COLON> name = <VALUE>
	{
		return name.toString();
	}
}

String description() : { String result = null; Token t; }
{
	<DESCRIPTION> <COLON> ( t = <DESCRIPTIONTEXT> { result = (result == null)? t.toString() : result+" "+t.toString();} )*
	{
	  return result;
	}
}

String version() : { Token t; }
{
	< VERSION > <COLON> t = <VALUE>
	{
	  return t.toString();
	} 
}

boolean preferred() : { Token t; }
{
	< PREFERRED > <COLON> t = <BOOLEAN_LITERAL>
	{
	  return Boolean.valueOf(t.image);
	}
}

boolean isPublic() : { Token t; }
{
	< PUBLIC > <COLON> t = <BOOLEAN_LITERAL>
	{
	  return Boolean.valueOf(t.image);
	}
}

URI icon() : { Token t; }
{
	< ICON > <COLON> t = <URI_LITERAL>
	{
	  return URI.create(t.image);
	}
}

List<TypedParameter> parameters() : { List<TypedParameter> p = new ArrayList<TypedParameter>(); TypedParameter t; }
{

	<PARAMETERS> <COLON> ( t = parameterList() { p.add(t); })*
	{
		return p;
	}
}

TypedParameter parameterList(): { Token v, l, c; TypedParameter f = new TypedParameter(); String ct = null; }
{
	 [<OPTIONAL > { f.setOptional(true); }]
	 (
	   ( <INT> v = <VARIABLE_NAME > { f.setName(v.image); f.setDescription(v.image); f.setType(ParameterType.Long);}  [ <EQUALS> l = <INTEGER_LITERAL> { f.setDefaultValue(l.image); }] (c = <COMMENT> { ct = (ct==null)?c.toString():ct+" "+c; f.setDescription(ct); })* ) |
	   ( <FLOAT>  v = <VARIABLE_NAME > { f.setName(v.image); f.setDescription(v.image); f.setType(ParameterType.Double); }[ <EQUALS> (l = <FLOATING_POINT_LITERAL> | l = <INTEGER_LITERAL>) { f.setDefaultValue(l.image); }] (c = <COMMENT>{ ct = (ct==null)?c.toString():ct+" "+c; f.setDescription(ct);})* ) |
	   ( <STRING> v = <VARIABLE_NAME > { f.setName(v.image); f.setDescription(v.image); f.setType(ParameterType.String); }[ <EQUALS> l = <STRING_LITERAL> { f.setDefaultValue(l.image); } ] (c = <COMMENT>{ ct = (ct==null)?c.toString():ct+" "+c; f.setDescription(ct); })* ) |
	   ( <SECRET> v = <VARIABLE_NAME > { f.setName(v.image); f.setDescription(v.image); f.setType(ParameterType.Secret); }[ <EQUALS> l = <STRING_LITERAL> { f.setDefaultValue(l.image); }] (c = <COMMENT>{ ct = (ct==null)?c.toString():ct+" "+c; f.setDescription(ct);})* ) |
	   ( <BOOLEAN> v = <VARIABLE_NAME > { f.setName(v.image); f.setDescription(v.image); f.setType(ParameterType.Boolean); }[ <EQUALS> l = <BOOLEAN_LITERAL> { f.setDefaultValue(l.image); } ] (c = <COMMENT>{ ct = (ct==null)?c.toString():ct+" "+c; f.setDescription(ct); })* )
	)
	{
	  return f;
	}
	  
}

List<FileSpecification> inputFiles() : { List<FileSpecification> p = new ArrayList<FileSpecification>(); FileSpecification t; }
{
	<INPUT> <COLON> ( t = inputFile() { p.add(t); } )*
	{
		return p;
	}
}

FileSpecification inputFile() : { Token s, c; FileSpecification f = new FileSpecification(); String ct = null; }
{
	 [<OPTIONAL> { f.setOptional(true); } ] s = <FILESPEC> { f.setName(s.image); } (c = <COMMENT> { ct = (ct==null)?c.toString():ct+" "+c; f.setDescription(ct); })+
	 {
	   return f;
	 }
}

List<FileSpecification> outputFiles() : { List<FileSpecification> p = new ArrayList<FileSpecification>(); FileSpecification t; }
{
	<OUTPUT> <COLON> ( t = outputFile() { p.add(t); } )*
	{
		return p;
	}
}

FileSpecification outputFile() : { Token s, c; FileSpecification f = new FileSpecification(); String ct = null; }
{
	 s = <FILESPEC> { f.setName(s.image); } (c = <COMMENT> { ct = (ct==null)?c.toString():ct+" "+c; f.setDescription(ct); })+
	 {
	   return f;
	 }
}

List<CommandImplementationDefinition> implementations() :
{
  List<CommandImplementationDefinition> p = new ArrayList<CommandImplementationDefinition >();
  CommandImplementationDefinition cid;
  }
{
	( cid = implementation() { p.add(cid); } )+
	{
		return p;
	}
}

CommandImplementationDefinition implementation() : { Token c; Token t = null; Token b = null; }
{
	c = <CLOUDNAME> <COLON> [t = <ANNOTATION>] [b = <IMPLEMENTATION>] <END>
	{
	  	String name = c.image;
	  	String annotation = (t == null)? "" : t.image;
	  	String body = (b == null)? null : b.image;
	  	CommandImplementationDefinition cid = new CommandImplementationDefinition(name, annotation, body, c.beginLine+1);
		cid.setCompiled(new n3phele.service.nShell.Shell(cid.getBody(), cid.getLineNo()).compile());
	  	return cid;
	}
}
