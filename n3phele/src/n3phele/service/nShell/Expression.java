/* Generated By:JJTree&JavaCC: Do not edit this line. Expression.java */
package n3phele.service.nShell;
import java.util.HashMap;
import java.util.Map;
/** * (C) Copyright 2010-2013. Nigel Cook. All rights reserved. * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER. *  * Licensed under the terms described in LICENSE file that accompanied this code, (the "License"); you may not use this file * except in compliance with the License.  *  *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on  *  an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the  *  specific language governing permissions and limitations under the License. */

public class Expression/*@bgen(jjtree)*/implements ExpressionTreeConstants, ExpressionConstants {/*@bgen(jjtree)*/
  protected JJTExpressionState jjtree = new JJTExpressionState();public Expression(String s, int lineNo, int columnNo)
        {
                jj_input_stream = new SimpleCharStream(new java.io.StringReader(s), lineNo, columnNo);
        jj_input_stream.setTabSize(4);
        token_source = new ExpressionTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 5; i++) jj_la1[i] = -1;
        }

        public void reInit(String s, int lineNo, int columnNo)
        {
                jj_input_stream.ReInit(new java.io.StringReader(s), lineNo, columnNo);
            token_source.ReInit(jj_input_stream);
            token = new Token();
            jj_ntk = -1;
            jjtree.reset();
            jj_gen = 0;
            for (int i = 0; i < 20; i++) jj_la1[i] = -1;
            for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
        }

  final public void functionExpression() throws ParseException {
                             /*@bgen(jjtree) functionExpression */
  SimpleNode jjtn000 = (SimpleNode)n3phele.service.nShell.ExpressionNode.jjtCreate(JJTFUNCTIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGEX:
        jj_consume_token(REGEX);
        conditionalExpression();
        jj_consume_token(24);
        conditionalExpression();
        jj_consume_token(24);
        conditionalExpression();
        jj_consume_token(25);
                                                                                                              jjtree.closeNodeScope(jjtn000, true);
                                                                                                              jjtc000 = false;
                                                                                                              jjtn000.jjtSetValue("regex");
        break;
      case MAX:
        jj_consume_token(MAX);
        conditionalExpression();
        jj_consume_token(24);
        conditionalExpression();
        jj_consume_token(25);
                                                                                    jjtree.closeNodeScope(jjtn000, true);
                                                                                    jjtc000 = false;
                                                                                    jjtn000.jjtSetValue("max");
        break;
      case MIN:
        jj_consume_token(MIN);
        conditionalExpression();
        jj_consume_token(24);
        conditionalExpression();
        jj_consume_token(25);
                                                                                    jjtree.closeNodeScope(jjtn000, true);
                                                                                    jjtc000 = false;
                                                                                    jjtn000.jjtSetValue("min");
        break;
      case LENGTH:
        jj_consume_token(LENGTH);
        if (jj_2_1(2147483647)) {
          list();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case REGEX:
          case MAX:
          case MIN:
          case LENGTH:
          case ESCAPE:
          case UNESCAPE:
          case STRING:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:
          case 36:
          case 37:
          case 41:
          case 42:
          case 43:
            conditionalExpression();
            break;
          default:
            jj_la1[0] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(25);
                                                                                        jjtree.closeNodeScope(jjtn000, true);
                                                                                        jjtc000 = false;
                                                                                        jjtn000.jjtSetValue("length");
        break;
      case STRING:
        jj_consume_token(STRING);
        list();
        jj_consume_token(24);
        conditionalExpression();
        jj_consume_token(24);
        conditionalExpression();
        jj_consume_token(25);
                                                                                              jjtree.closeNodeScope(jjtn000, true);
                                                                                              jjtc000 = false;
                                                                                              jjtn000.jjtSetValue("string");
        break;
      case ESCAPE:
        jj_consume_token(ESCAPE);
        conditionalExpression();
        jj_consume_token(25);
                                                           jjtree.closeNodeScope(jjtn000, true);
                                                           jjtc000 = false;
                                                           jjtn000.jjtSetValue("escape");
        break;
      case UNESCAPE:
        jj_consume_token(UNESCAPE);
        conditionalExpression();
        jj_consume_token(25);
                                                             jjtree.closeNodeScope(jjtn000, true);
                                                             jjtc000 = false;
                                                             jjtn000.jjtSetValue("unescape");
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public SimpleNode buildExpressionTree() throws ParseException {
                                           SimpleNode t;
    t = conditionalExpression();
    jj_consume_token(0);
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public SimpleNode conditionalExpression() throws ParseException {
                                      /*@bgen(jjtree) conditionalExpression */
  SimpleNode jjtn000 = (SimpleNode)n3phele.service.nShell.ExpressionNode.jjtCreate(JJTCONDITIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      logicalORExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 26:
        jj_consume_token(26);
        conditionalExpression();
        jj_consume_token(27);
        conditionalExpression();
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public void logicalORExpression() throws ParseException {
                              /*@bgen(jjtree) logicalORExpression */
  SimpleNode jjtn000 = (SimpleNode)n3phele.service.nShell.ExpressionNode.jjtCreate(JJTLOGICALOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      logicalANDExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 28:
        jj_consume_token(28);
        logicalORExpression();
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void logicalANDExpression() throws ParseException {
                               /*@bgen(jjtree) logicalANDExpression */
  SimpleNode jjtn000 = (SimpleNode)n3phele.service.nShell.ExpressionNode.jjtCreate(JJTLOGICALANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      equalityExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 29:
        jj_consume_token(29);
        logicalANDExpression();
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void equalityExpression() throws ParseException {
                             /*@bgen(jjtree) equalityExpression */
                              SimpleNode jjtn000 = (SimpleNode)n3phele.service.nShell.ExpressionNode.jjtCreate(JJTEQUALITYEXPRESSION);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);String op;
    try {
      relationalExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 30:
      case 31:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 30:
          jj_consume_token(30);
                                                                          jjtn000.jjtSetValue("==");
          break;
        case 31:
          jj_consume_token(31);
                                                                          jjtn000.jjtSetValue("!=");
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        equalityExpression();
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void relationalExpression() throws ParseException {
                               /*@bgen(jjtree) relationalExpression */
                               SimpleNode jjtn000 = (SimpleNode)n3phele.service.nShell.ExpressionNode.jjtCreate(JJTRELATIONALEXPRESSION);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);String op;
    try {
      additiveExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 32:
      case 33:
      case 34:
      case 35:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 32:
          jj_consume_token(32);
                                                                                          jjtn000.jjtSetValue("<");
          break;
        case 33:
          jj_consume_token(33);
                                                                                          jjtn000.jjtSetValue(">");
          break;
        case 34:
          jj_consume_token(34);
                                                                                          jjtn000.jjtSetValue("<=");
          break;
        case 35:
          jj_consume_token(35);
                                                                                          jjtn000.jjtSetValue(">=");
          break;
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        relationalExpression();
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void additiveExpression() throws ParseException {
                             /*@bgen(jjtree) additiveExpression */
                              SimpleNode jjtn000 = (SimpleNode)n3phele.service.nShell.ExpressionNode.jjtCreate(JJTADDITIVEEXPRESSION);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);Token op;
    try {
      multiplicativeExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 36:
      case 37:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 36:
          op = jj_consume_token(36);
          break;
        case 37:
          op = jj_consume_token(37);
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        additiveExpression();
          jjtn000.jjtSetValue(op.image);
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void multiplicativeExpression() throws ParseException {
                                   /*@bgen(jjtree) multiplicativeExpression */
  SimpleNode jjtn000 = (SimpleNode)n3phele.service.nShell.ExpressionNode.jjtCreate(JJTMULTIPLICATIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      unaryExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 38:
      case 39:
      case 40:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 38:
          jj_consume_token(38);
                                          jjtn000.jjtSetValue("*");
          break;
        case 39:
          jj_consume_token(39);
                                          jjtn000.jjtSetValue("/");
          break;
        case 40:
          jj_consume_token(40);
                                          jjtn000.jjtSetValue("%");
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        multiplicativeExpression();
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void unaryExpression() throws ParseException {
                          /*@bgen(jjtree) unaryExpression */
  SimpleNode jjtn000 = (SimpleNode)n3phele.service.nShell.ExpressionNode.jjtCreate(JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGEX:
      case MAX:
      case MIN:
      case LENGTH:
      case ESCAPE:
      case UNESCAPE:
      case STRING:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case 43:
        primaryExpression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 44:
          listIndexExpression();
          break;
        default:
          jj_la1[13] = jj_gen;
          ;
        }
        break;
      case 36:
      case 37:
      case 41:
      case 42:
        unaryOperator();
        unaryExpression();
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void unaryOperator() throws ParseException {
                        /*@bgen(jjtree) unaryOperator */
  SimpleNode jjtn000 = (SimpleNode)n3phele.service.nShell.ExpressionNode.jjtCreate(JJTUNARYOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 36:
        jj_consume_token(36);
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                  jjtn000.jjtSetValue("+");
        break;
      case 37:
        jj_consume_token(37);
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                  jjtn000.jjtSetValue("-");
        break;
      case 41:
        jj_consume_token(41);
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                          jjtn000.jjtSetValue("~");
        break;
      case 42:
        jj_consume_token(42);
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                          jjtn000.jjtSetValue("!");
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void primaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
      constant();
      break;
    case 43:
      jj_consume_token(43);
      conditionalExpression();
      jj_consume_token(25);
      break;
    case REGEX:
    case MAX:
    case MIN:
    case LENGTH:
    case ESCAPE:
    case UNESCAPE:
    case STRING:
      functionExpression();
      break;
    case IDENTIFIER:
      identifier();
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void listIndexExpression() throws ParseException {
                              /*@bgen(jjtree) listIndexExpression */
  SimpleNode jjtn000 = (SimpleNode)n3phele.service.nShell.ExpressionNode.jjtCreate(JJTLISTINDEXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(44);
      conditionalExpression();
      jj_consume_token(45);
    } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  final public void identifier() throws ParseException {
                     /*@bgen(jjtree) identifier */
                      SimpleNode jjtn000 = (SimpleNode)n3phele.service.nShell.ExpressionNode.jjtCreate(JJTIDENTIFIER);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetValue(t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void primaryListExpression() throws ParseException {
                                /*@bgen(jjtree) primaryListExpression */
  SimpleNode jjtn000 = (SimpleNode)n3phele.service.nShell.ExpressionNode.jjtCreate(JJTPRIMARYLISTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 43:
        jj_consume_token(43);
        list();
        jj_consume_token(25);
        break;
      case IDENTIFIER:
        identifier();
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
             if (jjtc000) {
               jjtree.clearNodeScope(jjtn000);
               jjtc000 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte000 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte000;}
             }
             if (jjte000 instanceof ParseException) {
               {if (true) throw (ParseException)jjte000;}
             }
             {if (true) throw (Error)jjte000;}
    } finally {
             if (jjtc000) {
               jjtree.closeNodeScope(jjtn000, true);
             }
    }
  }

  final public void subList() throws ParseException {
                  /*@bgen(jjtree) subList */
  SimpleNode jjtn000 = (SimpleNode)n3phele.service.nShell.ExpressionNode.jjtCreate(JJTSUBLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      primaryListExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 44:
        jj_consume_token(44);
        conditionalExpression();
        jj_consume_token(24);
        conditionalExpression();
        jj_consume_token(45);
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void list() throws ParseException {
               /*@bgen(jjtree) list */
  SimpleNode jjtn000 = (SimpleNode)n3phele.service.nShell.ExpressionNode.jjtCreate(JJTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      subList();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 36:
        jj_consume_token(36);
        list();
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void constant() throws ParseException {
                   /*@bgen(jjtree) constant */
                   SimpleNode jjtn000 = (SimpleNode)n3phele.service.nShell.ExpressionNode.jjtCreate(JJTCONSTANT);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        t = jj_consume_token(INTEGER_LITERAL);
                                                  jjtree.closeNodeScope(jjtn000, true);
                                                  jjtc000 = false;
                                                  jjtn000.jjtSetValue(Integer.decode(t.image));
        break;
      case STRING_LITERAL:
        t = jj_consume_token(STRING_LITERAL);
                                                  jjtree.closeNodeScope(jjtn000, true);
                                                  jjtc000 = false;
                                                  jjtn000.jjtSetValue(t.image.substring(1,t.image.length()-1));
        break;
      case FLOATING_POINT_LITERAL:
        t = jj_consume_token(FLOATING_POINT_LITERAL);
                                          jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
                                          jjtn000.jjtSetValue(Double.valueOf(t.image));
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(40)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_35()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(39)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(38)) return true;
    return false;
  }

  private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    }
    }
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_3R_28()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) return true;
    }
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_5() {
    if (jj_scan_token(44)) return true;
    if (jj_3R_8()) return true;
    if (jj_scan_token(24)) return true;
    if (jj_3R_8()) return true;
    if (jj_scan_token(45)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_22()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(29)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(35)) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(28)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(34)) return true;
    return false;
  }

  private boolean jj_3R_3() {
    if (jj_scan_token(36)) return true;
    if (jj_3R_1()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(33)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(32)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    }
    }
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_3R_18()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(26)) return true;
    if (jj_3R_8()) return true;
    if (jj_scan_token(27)) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(31)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(30)) return true;
    return false;
  }

  private boolean jj_3R_1() {
    if (jj_3R_2()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_3()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_3R_16()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_2() {
    if (jj_3R_4()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_5()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_7() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_3R_14()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_6() {
    if (jj_scan_token(43)) return true;
    if (jj_3R_1()) return true;
    if (jj_scan_token(25)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_1()) return true;
    return false;
  }

  private boolean jj_3R_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_6()) {
    jj_scanpos = xsp;
    if (jj_3R_7()) return true;
    }
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_3R_12()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_13()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_1()) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_3R_10()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(44)) return true;
    if (jj_3R_8()) return true;
    if (jj_scan_token(45)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(UNESCAPE)) return true;
    if (jj_3R_8()) return true;
    if (jj_scan_token(25)) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(ESCAPE)) return true;
    if (jj_3R_8()) return true;
    if (jj_scan_token(25)) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(LENGTH)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    }
    if (jj_scan_token(25)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(MIN)) return true;
    if (jj_3R_8()) return true;
    if (jj_scan_token(24)) return true;
    if (jj_3R_8()) return true;
    if (jj_scan_token(25)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(43)) return true;
    if (jj_3R_8()) return true;
    if (jj_scan_token(25)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(MAX)) return true;
    if (jj_3R_8()) return true;
    if (jj_scan_token(24)) return true;
    if (jj_3R_8()) return true;
    if (jj_scan_token(25)) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(STRING)) return true;
    if (jj_3R_1()) return true;
    if (jj_scan_token(24)) return true;
    if (jj_3R_8()) return true;
    if (jj_scan_token(24)) return true;
    if (jj_3R_8()) return true;
    if (jj_scan_token(25)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(REGEX)) return true;
    if (jj_3R_8()) return true;
    if (jj_scan_token(24)) return true;
    if (jj_3R_8()) return true;
    if (jj_scan_token(24)) return true;
    if (jj_3R_8()) return true;
    if (jj_scan_token(25)) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(42)) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(41)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(37)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(36)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_37()) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ExpressionTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[21];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1a3fc0,0x1fc0,0x4000000,0x10000000,0x20000000,0xc0000000,0xc0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1a3fc0,0x0,0x1a3fc0,0x100000,0x0,0x0,0xa2000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xe30,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0xf,0x30,0x30,0x1c0,0x1c0,0x1000,0xe30,0x630,0x800,0x800,0x1000,0x10,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Expression(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Expression(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ExpressionTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Expression(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ExpressionTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Expression(ExpressionTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ExpressionTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[46];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 21; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 46; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
