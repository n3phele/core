/* Generated By:JJTree&JavaCC: Do not edit this line. Expression.java */
package n3phele.service.nShell;
import java.util.HashMap;
import java.util.Map;
/** * (C) Copyright 2010-2013. Nigel Cook. All rights reserved. * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER. *  * Licensed under the terms described in LICENSE file that accompanied this code, (the "License"); you may not use this file * except in compliance with the License.  *  *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on  *  an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the  *  specific language governing permissions and limitations under the License. */

public class Expression/*@bgen(jjtree)*/implements ExpressionTreeConstants, ExpressionConstants {/*@bgen(jjtree)*/
  protected JJTExpressionState jjtree = new JJTExpressionState();public Expression(String s, int lineNo, int columnNo)
        {
                jj_input_stream = new SimpleCharStream(new java.io.StringReader(s), lineNo, columnNo);
        jj_input_stream.setTabSize(4);
        token_source = new ExpressionTokenManager(jj_input_stream);
        this.ReInit(token_source);
        }

        public void reInit(String s, int lineNo, int columnNo)
        {
                jj_input_stream.ReInit(new java.io.StringReader(s), lineNo, columnNo);
            token_source.ReInit(jj_input_stream);
            this.ReInit(token_source);
        }

  final public void functionExpression() throws ParseException {
                             /*@bgen(jjtree) functionExpression */
  SelfCompilingNode jjtn000 = (SelfCompilingNode)n3phele.service.nShell.ExpressionNode.jjtCreate(JJTFUNCTIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGEX:
        jj_consume_token(REGEX);
        conditionalExpression();
        jj_consume_token(28);
        conditionalExpression();
        jj_consume_token(28);
        conditionalExpression();
        jj_consume_token(29);
                                                                                                              jjtree.closeNodeScope(jjtn000, true);
                                                                                                              jjtc000 = false;
                                                                                                              jjtn000.jjtSetValue("regex");
        break;
      case MAX:
        jj_consume_token(MAX);
        conditionalExpression();
        jj_consume_token(28);
        conditionalExpression();
        jj_consume_token(29);
                                                                                    jjtree.closeNodeScope(jjtn000, true);
                                                                                    jjtc000 = false;
                                                                                    jjtn000.jjtSetValue("max");
        break;
      case MIN:
        jj_consume_token(MIN);
        conditionalExpression();
        jj_consume_token(28);
        conditionalExpression();
        jj_consume_token(29);
                                                                                    jjtree.closeNodeScope(jjtn000, true);
                                                                                    jjtc000 = false;
                                                                                    jjtn000.jjtSetValue("min");
        break;
      case LENGTH:
        jj_consume_token(LENGTH);
        conditionalExpression();
        jj_consume_token(29);
                                                           jjtree.closeNodeScope(jjtn000, true);
                                                           jjtc000 = false;
                                                           jjtn000.jjtSetValue("length");
        break;
      case STRING:
        jj_consume_token(STRING);
        conditionalExpression();
        jj_consume_token(28);
        conditionalExpression();
        jj_consume_token(28);
        conditionalExpression();
        jj_consume_token(29);
                                                                                                               jjtree.closeNodeScope(jjtn000, true);
                                                                                                               jjtc000 = false;
                                                                                                               jjtn000.jjtSetValue("string");
        break;
      case ESCAPE:
        jj_consume_token(ESCAPE);
        conditionalExpression();
        jj_consume_token(29);
                                                           jjtree.closeNodeScope(jjtn000, true);
                                                           jjtc000 = false;
                                                           jjtn000.jjtSetValue("escape");
        break;
      case UNESCAPE:
        jj_consume_token(UNESCAPE);
        conditionalExpression();
        jj_consume_token(29);
                                                             jjtree.closeNodeScope(jjtn000, true);
                                                             jjtc000 = false;
                                                             jjtn000.jjtSetValue("unescape");
        break;
      case LIST:
        jj_consume_token(LIST);
        conditionalExpression();
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 28:
            ;
            break;
          default:
            jj_la1[0] = jj_gen;
            break label_1;
          }
          jj_consume_token(28);
          conditionalExpression();
        }
        jj_consume_token(29);
                                                                                          jjtree.closeNodeScope(jjtn000, true);
                                                                                          jjtc000 = false;
                                                                                          jjtn000.jjtSetValue("list");
        break;
      case KEY:
        jj_consume_token(KEY);
        conditionalExpression();
        jj_consume_token(29);
                                                         jjtree.closeNodeScope(jjtn000, true);
                                                         jjtc000 = false;
                                                         jjtn000.jjtSetValue("key");
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public SelfCompilingNode buildExpressionTree() throws ParseException {
                                                  SimpleNode t;
    t = conditionalExpression();
    jj_consume_token(0);
    {if (true) return (SelfCompilingNode) t;}
    throw new Error("Missing return statement in function");
  }

  final public SimpleNode conditionalExpression() throws ParseException {
                                      /*@bgen(jjtree) conditionalExpression */
                                       SelfCompilingNode jjtn000 = (SelfCompilingNode)n3phele.service.nShell.ExpressionNode.jjtCreate(JJTCONDITIONALEXPRESSION);
                                       boolean jjtc000 = true;
                                       jjtree.openNodeScope(jjtn000);jjtn000.isNoop();
    try {
      logicalORExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 30:
        jj_consume_token(30);
        conditionalExpression();
        jj_consume_token(31);
        conditionalExpression();
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public void logicalORExpression() throws ParseException {
                              /*@bgen(jjtree) logicalORExpression */
                               SelfCompilingNode jjtn000 = (SelfCompilingNode)n3phele.service.nShell.ExpressionNode.jjtCreate(JJTLOGICALOREXPRESSION);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);jjtn000.isNoop();
    try {
      logicalANDExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 32:
        jj_consume_token(32);
        logicalORExpression();
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void logicalANDExpression() throws ParseException {
                               /*@bgen(jjtree) logicalANDExpression */
                                SelfCompilingNode jjtn000 = (SelfCompilingNode)n3phele.service.nShell.ExpressionNode.jjtCreate(JJTLOGICALANDEXPRESSION);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);jjtn000.isNoop();
    try {
      equalityExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 33:
        jj_consume_token(33);
        logicalANDExpression();
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void equalityExpression() throws ParseException {
                             /*@bgen(jjtree) equalityExpression */
                              SelfCompilingNode jjtn000 = (SelfCompilingNode)n3phele.service.nShell.ExpressionNode.jjtCreate(JJTEQUALITYEXPRESSION);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);String op; jjtn000.isNoop();
    try {
      relationalExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 34:
      case 35:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 34:
          jj_consume_token(34);
                                                                          jjtn000.jjtSetValue("==");
          break;
        case 35:
          jj_consume_token(35);
                                                                          jjtn000.jjtSetValue("!=");
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        equalityExpression();
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void relationalExpression() throws ParseException {
                               /*@bgen(jjtree) relationalExpression */
                               SelfCompilingNode jjtn000 = (SelfCompilingNode)n3phele.service.nShell.ExpressionNode.jjtCreate(JJTRELATIONALEXPRESSION);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);String op; jjtn000.isNoop();
    try {
      additiveExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 36:
      case 37:
      case 38:
      case 39:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 36:
          jj_consume_token(36);
                                                                                          jjtn000.jjtSetValue("<");
          break;
        case 37:
          jj_consume_token(37);
                                                                                          jjtn000.jjtSetValue(">");
          break;
        case 38:
          jj_consume_token(38);
                                                                                          jjtn000.jjtSetValue("<=");
          break;
        case 39:
          jj_consume_token(39);
                                                                                          jjtn000.jjtSetValue(">=");
          break;
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        relationalExpression();
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void additiveExpression() throws ParseException {
                             /*@bgen(jjtree) additiveExpression */
                              SelfCompilingNode jjtn000 = (SelfCompilingNode)n3phele.service.nShell.ExpressionNode.jjtCreate(JJTADDITIVEEXPRESSION);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);Token op; jjtn000.isNoop();
    try {
      multiplicativeExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 40:
      case 41:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 40:
          op = jj_consume_token(40);
          break;
        case 41:
          op = jj_consume_token(41);
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        additiveExpression();
          jjtn000.jjtSetValue(op.image);
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void multiplicativeExpression() throws ParseException {
                                   /*@bgen(jjtree) multiplicativeExpression */
                                    SelfCompilingNode jjtn000 = (SelfCompilingNode)n3phele.service.nShell.ExpressionNode.jjtCreate(JJTMULTIPLICATIVEEXPRESSION);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);jjtn000.isNoop();
    try {
      unaryExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 42:
      case 43:
      case 44:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 42:
          jj_consume_token(42);
                                          jjtn000.jjtSetValue("*");
          break;
        case 43:
          jj_consume_token(43);
                                          jjtn000.jjtSetValue("/");
          break;
        case 44:
          jj_consume_token(44);
                                          jjtn000.jjtSetValue("%");
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        multiplicativeExpression();
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void unaryExpression() throws ParseException {
                          /*@bgen(jjtree) unaryExpression */
                           SelfCompilingNode jjtn000 = (SelfCompilingNode)n3phele.service.nShell.ExpressionNode.jjtCreate(JJTUNARYEXPRESSION);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);jjtn000.isNoop(); Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGEX:
      case MAX:
      case MIN:
      case LENGTH:
      case ESCAPE:
      case UNESCAPE:
      case STRING:
      case LIST:
      case KEY:
      case TRUE:
      case FALSE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case 47:
        primaryExpression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 48:
          listIndexExpression();
          break;
        default:
          jj_la1[13] = jj_gen;
          ;
        }
        break;
      case 40:
      case 41:
      case 45:
      case 46:
        t = unaryOperator();
        unaryExpression();
                                                    jjtree.closeNodeScope(jjtn000, true);
                                                    jjtc000 = false;
                                                    jjtn000.jjtSetValue(t.image); jjtn000.notNoop();
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public Token unaryOperator() throws ParseException {
                               Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 40:
      t = jj_consume_token(40);
      break;
    case 41:
      t = jj_consume_token(41);
      break;
    case 45:
      t = jj_consume_token(45);
      break;
    case 46:
      t = jj_consume_token(46);
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public void primaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
      constant();
      break;
    case 47:
      jj_consume_token(47);
      conditionalExpression();
      jj_consume_token(29);
      break;
    case REGEX:
    case MAX:
    case MIN:
    case LENGTH:
    case ESCAPE:
    case UNESCAPE:
    case STRING:
    case LIST:
    case KEY:
      functionExpression();
      break;
    case IDENTIFIER:
      identifier();
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void listIndexExpression() throws ParseException {
    jj_consume_token(48);
    conditionalExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 28:
      jj_consume_token(28);
      conditionalExpression();
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    jj_consume_token(49);
  }

  final public void identifier() throws ParseException {
                     /*@bgen(jjtree) identifier */
                      SelfCompilingNode jjtn000 = (SelfCompilingNode)n3phele.service.nShell.ExpressionNode.jjtCreate(JJTIDENTIFIER);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetValue(t.image.substring(2));
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void constant() throws ParseException {
                   /*@bgen(jjtree) constant */
                   SelfCompilingNode jjtn000 = (SelfCompilingNode)n3phele.service.nShell.ExpressionNode.jjtCreate(JJTCONSTANT);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        t = jj_consume_token(INTEGER_LITERAL);
                                                  jjtree.closeNodeScope(jjtn000, true);
                                                  jjtc000 = false;
                                                  jjtn000.jjtSetValue(Long.decode(t.image));
        break;
      case STRING_LITERAL:
        t = jj_consume_token(STRING_LITERAL);
                                                  jjtree.closeNodeScope(jjtn000, true);
                                                  jjtc000 = false;
                                                  jjtn000.jjtSetValue(t.image.substring(1,t.image.length()-1));
        break;
      case FLOATING_POINT_LITERAL:
        t = jj_consume_token(FLOATING_POINT_LITERAL);
                                          jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
                                          jjtn000.jjtSetValue(Double.valueOf(t.image));
        break;
      case TRUE:
        jj_consume_token(TRUE);
                                                                  jjtree.closeNodeScope(jjtn000, true);
                                                                  jjtc000 = false;
                                                                  jjtn000.jjtSetValue(Boolean.valueOf(true));
        break;
      case FALSE:
        jj_consume_token(FALSE);
                                                          jjtree.closeNodeScope(jjtn000, true);
                                                          jjtc000 = false;
                                                          jjtn000.jjtSetValue(Boolean.valueOf(false));
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  /** Generated Token Manager. */
  public ExpressionTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x10000000,0x7fc0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1a3ffc0,0x0,0x1a3ffc0,0x10000000,0xa38000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x1,0x2,0xc,0xc,0xf0,0xf0,0x300,0x300,0x1c00,0x1c00,0x10000,0xe300,0x6300,0x8000,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public Expression(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Expression(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ExpressionTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Expression(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ExpressionTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Expression(ExpressionTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ExpressionTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[50];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 19; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 50; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
