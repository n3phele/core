/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Shell.jj */
/*@egen*/options{  static = false;                                                  }PARSER_BEGIN(Shell)package n3phele.service.nShell;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import n3phele.service.model.ShellFragment;
/** * (C) Copyright 2010-2013. Nigel Cook. All rights reserved. * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER. *  * Licensed under the terms described in LICENSE file that accompanied this code, (the "License"); you may not use this file * except in compliance with the License.  *  *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on  *  an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the  *  specific language governing permissions and limitations under the License. */
public class Shell/*@bgen(jjtree)*/implements ShellTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTShellState jjtree = new JJTShellState();

/*@egen*/    protected Expression expressionHandler = null;
	public Shell(String s, int lineNo)	{	  	if(s.charAt(0) != '\n')	  	{	  	  	lineNo = lineNo -1;	  		s = "\n"+s;	   }		jj_input_stream = new SimpleCharStream(new java.io.StringReader(s), lineNo, 1);        jj_input_stream.setTabSize(4);        token_source = new ShellTokenManager(jj_input_stream);        token = new Token();        jj_ntk = -1;        jj_gen = 0;        for (int i = 0; i < 5; i++) jj_la1[i] = -1;	}	public Expression getExpressionHandler(String s, int lineNo, int columnNo)	{		if(expressionHandler == null)		{		  	return (expressionHandler = new Expression(s, lineNo, columnNo));		} else		{			expressionHandler.reInit(s, lineNo, columnNo);			return expressionHandler;		}			  	}    public SimpleNode getExpressionNode(String s, int lineNo, int columnNo) throws ParseException	{		Expression e = getExpressionHandler(s, lineNo, columnNo);	 	SimpleNode node = e.buildExpressionTree();	 	return node;    }	 public List<ShellFragment> compile() throws ParseException     {        List<ShellFragment> result = new ArrayList<ShellFragment>();        SelfCompilingNode s = script();        s.compile(result);        return result;     }	    }PARSER_END(Shell)//SPECIAL_TOKEN ://{//	< INDENT: "\n" ( " " | "\t" )+ >//  | < COMMENT: "#" (~["\n"])* >// }< fileListProcessing, DEFAULT, argProcessing, passThruProcessing, wrappedExpressionProcessing >SKIP :{     "\r"  |  "\n"  | < COMMENT: "#" (~["\n"])* >}< fileListProcessing, DEFAULT, argProcessing, passThruProcessing, wrappedExpressionProcessing >SPECIAL_TOKEN :{     < SPACE: ( " " | "\t" )+ >}< fileListProcessing, DEFAULT, argProcessing, passThruProcessing >SKIP :{   < EXPRESSIONWRAPPER: "$${" > : wrappedExpressionProcessing}// Shell primatives< passThruProcessing, DEFAULT >TOKEN :{	< ON: "ON" > : DEFAULT  | < CREATEVM: "CREATEVM" > : DEFAULT  | < FORLOOP: "FOR" > : DEFAULT  | < DESTROY: "DESTROY" > : DEFAULT  | < LOG: "LOG" > : DEFAULT  | < VARIABLEASSIGN: "$$" < VARSTART > (< VARREST >)* (< WHITESPACE >)* "=" (< WHITESPACE >)* > { String s = image.toString().trim(); matchedToken.image = s.substring(2, s.length()-1).trim(); } : DEFAULT  | < #VARSTART: ["A"-"Z", "a"-"z"] >  | < #VARREST:  ["A"-"Z", "a"-"z", "0"-"9", "_", "."] >  | < #WHITESPACE: " " | "\t" >}TOKEN :{    < NO_ARG_OPTION: ("--async" | "--wait" | "--needsAll" | "--needsNone" | "--producesAll" | "--producesNone" ) > { String ss = image.toString(); matchedToken.image = ss.substring(2); }  | < OPTION: "--" < OPTIONSTART > (< OPTIONREST >)* > { matchedToken.image = image.toString().substring(2); } : argProcessing   | < #OPTIONSTART: ["a"-"z"] >  | < #OPTIONREST: ["A"-"Z", "a"-"z", "0"-"9"] >}< argProcessing >TOKEN :{    < NON_SPACE_ARG : < ARGSTART > (< ARGREST >)* > : DEFAULT  | < #ARGSTART: ["A"-"Z", "a"-"z", "0"-"9", ".", "_", "/"]  >  | < #ARGREST:  ~[" ", "\n"] >  | < LITERAL_STRING : < STRING_LITERAL > > { matchedToken.image = image.toString() ;									  matchedToken.image = n3phele.service.n.helpers.StringEscapeUtils.unescapeJavaString(matchedToken.image.substring(1,matchedToken.image.length()-1));									} : DEFAULT    | < FILELIST : "["  > : fileListProcessing }< fileListProcessing >TOKEN :{	< FILESPEC: <FILESTART> (<FILEREST>)* >	|  <#FILESTART: ["A"-"Z","a"-"z","0"-"9","_","-","."]>	|  <#FILEREST: ["A"-"Z","a"-"z","0"-"9","_","-",".","/"]>	|  < COMMA: "," >	|  < FILELISTEND : "]" > :DEFAULT}< fileListProcessing, DEFAULT, wrappedExpressionProcessing, expressionProcessing >TOKEN :{	< COLON: ":" >}< argProcessing, DEFAULT, passThruProcessing >TOKEN :{	< LITERALBLOCK: "%%{" ([" ", "\t"])* ("\n")? (~["}"] | "}" ~["%"] | "}%" ~["%"])* "}%%" > 	{	        String sss = image.toString();            int i, j;            for(j = 3; j < sss.length() && (sss.charAt(j) == ' ' || sss.charAt(j) == '\t'); j++) ;            if(j < sss.length() && sss.charAt(j) == '\n') j++;            for(i = sss.length()-4; i > 0 && (sss.charAt(i) == ' ' || sss.charAt(i) == '\t'); i--) ;            if(i > 0 && sss.charAt(i) == '\n') i++;            sss = sss.substring(j, i+1);            StringBuffer b = new StringBuffer();            boolean skipToEnd = false;            for(int p=0; p < sss.length(); p++) {            	char c = sss.charAt(p);            	if(skipToEnd) {            		if(c == '\n') {            			skipToEnd = false;            		}            	} else {            		if(c == ' ' || c == '\t')            			continue;            		skipToEnd = true;            		            	}            	b.append(c);	            }            matchedToken.image = b.toString();    } : DEFAULT    | < VARIABLE: "$$" < VARSTART > (< VARREST >)*  > : DEFAULT    | < EXPRESSION: "$$" (~[" ", "\t", "\"", "'", "\\", "{", "\n", "\r" ] | < STRING_LITERAL> | ("'" (~["'"] | "\\'")* "'") )+ > : DEFAULT    | < #STRING_LITERAL: "\"" ( ~["\"","\\"] | "\\" ( ["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])?  | ["0"-"3"] ["0"-"7"] ["0"-"7"] ))* "\"">}< DEFAULT >TOKEN :{   <  PASSTHRU: (< PASSTHRUSET >)+ > : passThruProcessing | < #PASSTHRUSET: ( ~[" ", "\t", "\n", "\r", "$" ] | ( "$" ~["$"] )) >}< passThruProcessing >TOKEN :{    < PASSTHRUMORE:  (< PASSTHRUSET >)+ ("\n")?  >}< wrappedExpressionProcessing >TOKEN :{  < WRAPPEDEXPRESSION: (~["}"])* "}" > { matchedToken.image = image.toString().substring(0, image.toString().length()-1); } : DEFAULT}SelfCompilingNode script() : {/*@bgen(jjtree) script */
  SimpleNode jjtn000 = (SimpleNode)n3phele.service.nShell.ShellNode.jjtCreate(JJTSCRIPT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }{/*@bgen(jjtree) script */
  try {
/*@egen*/  (	 command()  )* < EOF >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {	return (SelfCompilingNode) jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void command()       : { }{  (	  simpleCommand()	| blockCommand()	| variableAssign()  )}void simpleCommand()       : { }{  (	  createvm()	| on()	| log()	| destroy()  )}void blockCommand()       : { }{    forCommand()    // placeholder for future block commands}void forCommand() : {/*@bgen(jjtree) forCommand */
                      SimpleNode jjtn000 = (SimpleNode)n3phele.service.nShell.ShellNode.jjtCreate(JJTFORCOMMAND);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }{/*@bgen(jjtree) forCommand */
    try {
/*@egen*/    t = < FORLOOP > variable() < COLON > expression() block(t.beginLine, t.beginColumn)/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/}void variable() : {/*@bgen(jjtree) variable */
                    SimpleNode jjtn000 = (SimpleNode)n3phele.service.nShell.ShellNode.jjtCreate(JJTVARIABLE);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }{/*@bgen(jjtree) variable */
    try {
/*@egen*/    t =  < VARIABLE >/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/    {		jjtn000.jjtSetValue(t.image);  	}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ }void block(int blockLine, int indent) : {/*@bgen(jjtree) block */
  SimpleNode jjtn000 = (SimpleNode)n3phele.service.nShell.ShellNode.jjtCreate(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }{/*@bgen(jjtree) block */
  try {
/*@egen*/  ( LOOKAHEAD({ getToken(1).kind != EOF &&                         indent < getToken(1).beginColumn }) 	command()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}  void createvm(): {/*@bgen(jjtree) createvm */
  SimpleNode jjtn000 = (SimpleNode)n3phele.service.nShell.ShellNode.jjtCreate(JJTCREATEVM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }{/*@bgen(jjtree) createvm */
        try {
/*@egen*/	< CREATEVM > ( option() )+/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ }void option() : {/*@bgen(jjtree) option */
                  SimpleNode jjtn000 = (SimpleNode)n3phele.service.nShell.ShellNode.jjtCreate(JJTOPTION);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }{/*@bgen(jjtree) option */
  try {
/*@egen*/  (		( t = < OPTION > arg() )		| t = < NO_ARG_OPTION >  )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ {		jjtn000.jjtSetValue(t.image);  	}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }void arg()       : { Token t; }{	literalArg()  | expression()  | fileList()}void literalArg() : {/*@bgen(jjtree) literalArg */
                      SimpleNode jjtn000 = (SimpleNode)n3phele.service.nShell.ShellNode.jjtCreate(JJTLITERALARG);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }{/*@bgen(jjtree) literalArg */
  try {
/*@egen*/  (		t = < NON_SPACE_ARG >	  | t = < LITERAL_STRING >	  | t = < LITERALBLOCK >  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.jjtSetValue(t.image);  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void on() : {/*@bgen(jjtree) on */
  SimpleNode jjtn000 = (SimpleNode)n3phele.service.nShell.ShellNode.jjtCreate(JJTON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }{/*@bgen(jjtree) on */
        try {
/*@egen*/	< ON > expression() ( option() )*  pieces()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void log() : {/*@bgen(jjtree) log */
  SimpleNode jjtn000 = (SimpleNode)n3phele.service.nShell.ShellNode.jjtCreate(JJTLOG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }{/*@bgen(jjtree) log */
        try {
/*@egen*/	< LOG > pieces()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void destroy() : {/*@bgen(jjtree) destroy */
  SimpleNode jjtn000 = (SimpleNode)n3phele.service.nShell.ShellNode.jjtCreate(JJTDESTROY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }{/*@bgen(jjtree) destroy */
        try {
/*@egen*/	< DESTROY >	 expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void variableAssign() : {/*@bgen(jjtree) variableAssign */
                          SimpleNode jjtn000 = (SimpleNode)n3phele.service.nShell.ShellNode.jjtCreate(JJTVARIABLEASSIGN);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }{/*@bgen(jjtree) variableAssign */
        try {
/*@egen*/	t = < VARIABLEASSIGN > ( simpleCommand() | expression() )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/	{	  jjtn000.jjtSetValue(t.image);	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void expression() : {/*@bgen(jjtree) expression */
                      SimpleNode jjtn000 = (SimpleNode)n3phele.service.nShell.ShellNode.jjtCreate(JJTEXPRESSION);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }{/*@bgen(jjtree) expression */
  try {
/*@egen*/  (		 	    t = < VARIABLE > 			{ jjtree.pushNode(getExpressionNode(t.image, t.beginLine, t.beginColumn)); }	  | t = < WRAPPEDEXPRESSION > 	{ jjtree.pushNode(getExpressionNode(t.image, t.beginLine, t.beginColumn)); }	  | t = < EXPRESSION >			{ jjtree.pushNode(getExpressionNode(t.image, t.beginLine, t.beginColumn)); }  )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ {	 	if(t.specialToken != null) 	 		jjtn000.jjtSetValue(t.specialToken.image);    }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}Token passThruFragment()       : { Token t;  }{	(   t = < PASSTHRU >   	  | t = < PASSTHRUMORE > 	)	{	  return t;	}}void passThru(boolean lastWasExp) : {/*@bgen(jjtree) passThru */
                                      SimpleNode jjtn000 = (SimpleNode)n3phele.service.nShell.ShellNode.jjtCreate(JJTPASSTHRU);
                                      boolean jjtc000 = true;
                                      jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; String result=null; Token first=null; String prefix = ""; }{/*@bgen(jjtree) passThru */
        try {
/*@egen*/	( LOOKAHEAD(1) t = passThruFragment()		{		  if(first == null)		  {		  	first = t;		  	if(lastWasExp)	{ 		  	  if(first.specialToken != null) {		  	  	prefix = first.specialToken.image;		  	  }		    }  		  }		  result = result == null ? prefix+t.image : result+" "+t.image;		}	)+/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/	{	  jjtn000.jjtSetValue(result);	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void pieces() : {/*@bgen(jjtree) pieces */
                  SimpleNode jjtn000 = (SimpleNode)n3phele.service.nShell.ShellNode.jjtCreate(JJTPIECES);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/ boolean lastWasExp = false; }{/*@bgen(jjtree) pieces */
        try {
/*@egen*/	( 	   expression()	   {	     lastWasExp = true;	   }	 |   passThru(lastWasExp)	   {	    lastWasExp = false;	   }	) +/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/	}void fileList() : {/*@bgen(jjtree) fileList */
                    SimpleNode jjtn000 = (SimpleNode)n3phele.service.nShell.ShellNode.jjtCreate(JJTFILELIST);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
/*@egen*/ Token f; Token m; }{/*@bgen(jjtree) fileList */
        try {
/*@egen*/	(  	    < FILELIST > [ fileElement() ( < COMMA > fileElement() ) * ] < FILELISTEND >	)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void fileElement() : {/*@bgen(jjtree) fileElement */
                       SimpleNode jjtn000 = (SimpleNode)n3phele.service.nShell.ShellNode.jjtCreate(JJTFILEELEMENT);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/ Token f; Token m; }{/*@bgen(jjtree) fileElement */
        try {
/*@egen*/	f = < FILESPEC > { m = f; } [ < COLON > m = < FILESPEC >]/*@bgen(jjtree)*/
                                                                  {
                                                                    jjtree.closeNodeScope(jjtn000, true);
                                                                    jjtc000 = false;
                                                                  }
/*@egen*/ { jjtn000.jjtSetValue(f.image+":"+m.image); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}  