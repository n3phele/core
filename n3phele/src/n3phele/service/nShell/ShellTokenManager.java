/* Generated By:JJTree&JavaCC: Do not edit this line. ShellTokenManager.java */
package n3phele.service.nShell;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import n3phele.service.model.ShellFragment;

/** Token Manager. */
public class ShellTokenManager implements ShellConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_1(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x20L) != 0L)
            return 29;
         if ((active0 & 0x400000000L) != 0L)
            return 111;
         if ((active0 & 0xffc0L) != 0L)
         {
            jjmatchedKind = 40;
            return 111;
         }
         return -1;
      case 1:
         if ((active0 & 0x20L) != 0L)
            return 30;
         if ((active0 & 0xf980L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 40;
               jjmatchedPos = 1;
            }
            return 111;
         }
         if ((active0 & 0x640L) != 0L)
            return 111;
         return -1;
      case 2:
         if ((active0 & 0x7a80L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 2;
            return 111;
         }
         if ((active0 & 0x8100L) != 0L)
            return 111;
         return -1;
      case 3:
         if ((active0 & 0x800L) != 0L)
            return 111;
         if ((active0 & 0x7280L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 3;
            return 111;
         }
         return -1;
      case 4:
         if ((active0 & 0x7280L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 4;
            return 111;
         }
         return -1;
      case 5:
         if ((active0 & 0x6080L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 5;
            return 111;
         }
         if ((active0 & 0x1200L) != 0L)
            return 111;
         return -1;
      case 6:
         if ((active0 & 0x4000L) != 0L)
            return 111;
         if ((active0 & 0x2080L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 6;
            return 111;
         }
         return -1;
      case 7:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 7;
            return 111;
         }
         if ((active0 & 0x80L) != 0L)
            return 111;
         return -1;
      case 8:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 8;
            return 111;
         }
         return -1;
      case 9:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 9;
            return 111;
         }
         return -1;
      case 10:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 10;
            return 111;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 36:
         return jjMoveStringLiteralDfa1_1(0x20L);
      case 58:
         return jjStartNfaWithStates_1(0, 34, 111);
      case 65:
         return jjMoveStringLiteralDfa1_1(0x2000L);
      case 67:
         return jjMoveStringLiteralDfa1_1(0x80L);
      case 68:
         return jjMoveStringLiteralDfa1_1(0x4000L);
      case 69:
         return jjMoveStringLiteralDfa1_1(0x1800L);
      case 70:
         return jjMoveStringLiteralDfa1_1(0x100L);
      case 73:
         return jjMoveStringLiteralDfa1_1(0x400L);
      case 76:
         return jjMoveStringLiteralDfa1_1(0x8000L);
      case 79:
         return jjMoveStringLiteralDfa1_1(0x240L);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 36:
         return jjMoveStringLiteralDfa2_1(active0, 0x20L);
      case 69:
         return jjMoveStringLiteralDfa2_1(active0, 0x4000L);
      case 70:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_1(1, 10, 111);
         break;
      case 76:
         return jjMoveStringLiteralDfa2_1(active0, 0x800L);
      case 78:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 6;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x200L);
      case 79:
         return jjMoveStringLiteralDfa2_1(active0, 0x8100L);
      case 82:
         return jjMoveStringLiteralDfa2_1(active0, 0x80L);
      case 83:
         return jjMoveStringLiteralDfa2_1(active0, 0x2000L);
      case 88:
         return jjMoveStringLiteralDfa2_1(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_1(0, active0);
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa3_1(active0, 0x280L);
      case 71:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_1(2, 15, 111);
         break;
      case 80:
         return jjMoveStringLiteralDfa3_1(active0, 0x1000L);
      case 82:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_1(2, 8, 111);
         break;
      case 83:
         return jjMoveStringLiteralDfa3_1(active0, 0x6800L);
      case 123:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(2, 5);
         break;
      default :
         break;
   }
   return jjStartNfa_1(1, active0);
}
private int jjMoveStringLiteralDfa3_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_1(active0, 0x80L);
      case 69:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_1(3, 11, 111);
         break;
      case 73:
         return jjMoveStringLiteralDfa4_1(active0, 0x2000L);
      case 79:
         return jjMoveStringLiteralDfa4_1(active0, 0x1000L);
      case 84:
         return jjMoveStringLiteralDfa4_1(active0, 0x4000L);
      case 88:
         return jjMoveStringLiteralDfa4_1(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_1(2, active0);
}
private int jjMoveStringLiteralDfa4_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa5_1(active0, 0x200L);
      case 77:
         return jjMoveStringLiteralDfa5_1(active0, 0x2000L);
      case 82:
         return jjMoveStringLiteralDfa5_1(active0, 0x5000L);
      case 84:
         return jjMoveStringLiteralDfa5_1(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_1(3, active0);
}
private int jjMoveStringLiteralDfa5_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa6_1(active0, 0x80L);
      case 73:
         return jjMoveStringLiteralDfa6_1(active0, 0x2000L);
      case 79:
         return jjMoveStringLiteralDfa6_1(active0, 0x4000L);
      case 84:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_1(5, 9, 111);
         else if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_1(5, 12, 111);
         break;
      default :
         break;
   }
   return jjStartNfa_1(4, active0);
}
private int jjMoveStringLiteralDfa6_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa7_1(active0, 0x2000L);
      case 86:
         return jjMoveStringLiteralDfa7_1(active0, 0x80L);
      case 89:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_1(6, 14, 111);
         break;
      default :
         break;
   }
   return jjStartNfa_1(5, active0);
}
private int jjMoveStringLiteralDfa7_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa8_1(active0, 0x2000L);
      case 77:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_1(7, 7, 111);
         break;
      default :
         break;
   }
   return jjStartNfa_1(6, active0);
}
private int jjMoveStringLiteralDfa8_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa9_1(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_1(7, active0);
}
private int jjMoveStringLiteralDfa9_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa10_1(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_1(8, active0);
}
private int jjMoveStringLiteralDfa10_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 86:
         return jjMoveStringLiteralDfa11_1(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_1(9, active0);
}
private int jjMoveStringLiteralDfa11_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 77:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_1(11, 13, 111);
         break;
      default :
         break;
   }
   return jjStartNfa_1(10, active0);
}
private int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 111;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffeeffffd9ffL & l) != 0L)
                  {
                     if (kind > 40)
                        kind = 40;
                     jjCheckNAddTwoStates(25, 26);
                  }
                  else if ((0x100000200L & l) != 0L)
                  {
                     if (kind > 4)
                        kind = 4;
                     jjCheckNAdd(2);
                  }
                  else if (curChar == 36)
                     jjAddStates(0, 2);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     jjCheckNAdd(24);
                  }
                  else if (curChar == 45)
                     jjAddStates(3, 9);
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 27;
                  else if (curChar == 34)
                     jjCheckNAddStates(10, 12);
                  else if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if (curChar == 35)
                  {
                     if (kind > 3)
                        kind = 3;
                     jjCheckNAdd(1);
                  }
                  break;
               case 30:
                  if ((0xffffff7affffd9ffL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     jjCheckNAddStates(13, 15);
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(16, 18);
                  else if (curChar == 34)
                     jjCheckNAddStates(19, 21);
                  break;
               case 111:
                  if ((0xffffffeeffffd9ffL & l) != 0L)
                  {
                     if (kind > 40)
                        kind = 40;
                     jjCheckNAddTwoStates(25, 26);
                  }
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if ((0xffffffefffffffffL & l) != 0L)
                  {
                     if (kind > 40)
                        kind = 40;
                     jjCheckNAddTwoStates(25, 26);
                  }
                  else if (curChar == 36)
                     jjCheckNAddStates(13, 15);
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 36;
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAdd(2);
                  break;
               case 4:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(22, 26);
                  break;
               case 5:
                  if (curChar == 10)
                     jjCheckNAddStates(27, 29);
                  break;
               case 6:
                  jjCheckNAddStates(27, 29);
                  break;
               case 8:
                  if ((0xffffffdfffffffffL & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 10:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 11:
                  if (curChar == 37 && kind > 35)
                     kind = 35;
                  break;
               case 12:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 14:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 34)
                     jjCheckNAddStates(10, 12);
                  break;
               case 16:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 18:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 19:
                  if (curChar == 34 && kind > 38)
                     kind = 38;
                  break;
               case 20:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(30, 33);
                  break;
               case 21:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 22:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(21);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAdd(24);
                  break;
               case 25:
                  if ((0xffffffeeffffd9ffL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddTwoStates(25, 26);
                  break;
               case 26:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if ((0xffffffefffffffffL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddTwoStates(25, 26);
                  break;
               case 28:
                  if (curChar == 36)
                     jjAddStates(0, 2);
                  break;
               case 31:
                  if ((0x3ff400000000000L & l) != 0L)
                     jjCheckNAddStates(34, 36);
                  break;
               case 32:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 33:
                  if (curChar != 61)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAdd(34);
                  break;
               case 34:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAdd(34);
                  break;
               case 35:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 37:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 38:
                  if (curChar == 36)
                     jjCheckNAddStates(13, 15);
                  break;
               case 39:
                  if ((0xffffff7affffd9ffL & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddStates(13, 15);
                  break;
               case 40:
                  if (curChar == 34)
                     jjCheckNAddStates(19, 21);
                  break;
               case 41:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(19, 21);
                  break;
               case 43:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(19, 21);
                  break;
               case 44:
                  if (curChar != 34)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddStates(13, 15);
                  break;
               case 45:
               case 47:
                  if (curChar == 39)
                     jjCheckNAddStates(16, 18);
                  break;
               case 46:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 49:
                  if (curChar != 39)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddStates(13, 15);
                  break;
               case 50:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(37, 40);
                  break;
               case 51:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(19, 21);
                  break;
               case 52:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 53:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(51);
                  break;
               case 54:
                  if (curChar == 45)
                     jjAddStates(3, 9);
                  break;
               case 60:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 65:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 74:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 84:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 95:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 107:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 108:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 110:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjstateSet[jjnewStateCnt++] = 110;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 25:
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddTwoStates(25, 26);
                  break;
               case 30:
                  if ((0xf7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     jjCheckNAddStates(13, 15);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAdd(37);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(34, 36);
                  break;
               case 111:
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddTwoStates(25, 26);
                  break;
               case 29:
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddTwoStates(25, 26);
                  break;
               case 1:
                  if (kind > 3)
                     kind = 3;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (curChar == 123)
                     jjCheckNAddStates(22, 26);
                  break;
               case 6:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 7:
                  if (curChar == 125)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 8:
                  jjCheckNAddStates(27, 29);
                  break;
               case 9:
                  if (curChar == 125)
                     jjAddStates(41, 42);
                  break;
               case 16:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 17:
                  if (curChar == 92)
                     jjAddStates(43, 45);
                  break;
               case 18:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 31:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(34, 36);
                  break;
               case 36:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAdd(37);
                  break;
               case 39:
                  if ((0xf7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddStates(13, 15);
                  break;
               case 41:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(19, 21);
                  break;
               case 42:
                  if (curChar == 92)
                     jjAddStates(46, 48);
                  break;
               case 43:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(19, 21);
                  break;
               case 46:
                  jjAddStates(16, 18);
                  break;
               case 48:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 55:
                  if (curChar == 99 && kind > 20)
                     kind = 20;
                  break;
               case 56:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 61:
                  if (curChar == 116 && kind > 20)
                     kind = 20;
                  break;
               case 62:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 66:
                  if (curChar == 108 && kind > 20)
                     kind = 20;
                  break;
               case 67:
               case 85:
                  if (curChar == 108)
                     jjCheckNAdd(66);
                  break;
               case 68:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 75:
                  if (curChar == 101 && kind > 20)
                     kind = 20;
                  break;
               case 76:
               case 96:
                  if (curChar == 110)
                     jjCheckNAdd(75);
                  break;
               case 77:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 86:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 91:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 97:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 101:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 102:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 109:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAdd(110);
                  break;
               case 110:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAdd(110);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 25:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddTwoStates(25, 26);
                  break;
               case 30:
               case 39:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddStates(13, 15);
                  break;
               case 111:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddTwoStates(25, 26);
                  break;
               case 29:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddTwoStates(25, 26);
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 6:
               case 8:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 16:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(10, 12);
                  break;
               case 41:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(19, 21);
                  break;
               case 46:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(16, 18);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 111 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 36:
         return jjMoveStringLiteralDfa1_0(0x20L);
      case 44:
         return jjStopAtPos(0, 32);
      case 58:
         return jjStopAtPos(0, 34);
      case 93:
         return jjStopAtPos(0, 33);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 36:
         return jjMoveStringLiteralDfa2_0(active0, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 123:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(2, 5);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 5;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff600000000000L & l) != 0L)
                  {
                     if (kind > 29)
                        kind = 29;
                     jjCheckNAdd(4);
                  }
                  else if ((0x100000200L & l) != 0L)
                  {
                     if (kind > 4)
                        kind = 4;
                     jjCheckNAdd(2);
                  }
                  else if (curChar == 35)
                  {
                     if (kind > 3)
                        kind = 3;
                     jjCheckNAdd(1);
                  }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAdd(2);
                  break;
               case 3:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ffe00000000000L & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAdd(4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 4:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAdd(4);
                  break;
               case 1:
                  if (kind > 3)
                     kind = 3;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 5 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 58:
         return jjStopAtPos(0, 34);
      default :
         return 1;
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x20L) != 0L)
            return 36;
         return -1;
      case 1:
         if ((active0 & 0x20L) != 0L)
            return 37;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 36:
         return jjMoveStringLiteralDfa1_2(0x20L);
      case 91:
         return jjStopAtPos(0, 28);
      default :
         return jjMoveNfa_2(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 36:
         return jjMoveStringLiteralDfa2_2(active0, 0x20L);
      default :
         break;
   }
   return jjStartNfa_2(0, active0);
}
private int jjMoveStringLiteralDfa2_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 123:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(2, 5);
         break;
      default :
         break;
   }
   return jjStartNfa_2(1, active0);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 55;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 36:
                  if (curChar == 36)
                     jjCheckNAddStates(49, 51);
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 0:
                  if ((0x3ffc00000000000L & l) != 0L)
                  {
                     if (kind > 24)
                        kind = 24;
                     jjCheckNAdd(4);
                  }
                  else if ((0x100000200L & l) != 0L)
                  {
                     if (kind > 4)
                        kind = 4;
                     jjCheckNAdd(2);
                  }
                  else if (curChar == 36)
                     jjAddStates(52, 53);
                  else if (curChar == 34)
                     jjCheckNAddStates(54, 59);
                  else if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 15;
                  else if (curChar == 35)
                  {
                     if (kind > 3)
                        kind = 3;
                     jjCheckNAdd(1);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     jjCheckNAdd(17);
                  }
                  break;
               case 37:
                  if ((0xffffff7affffd9ffL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     jjCheckNAddStates(49, 51);
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(60, 62);
                  else if (curChar == 34)
                     jjCheckNAddStates(63, 65);
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAdd(2);
                  break;
               case 3:
                  if ((0x3ffc00000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0xfffffffefffffbffL & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAdd(4);
                  break;
               case 6:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(66, 70);
                  break;
               case 7:
                  if (curChar == 10)
                     jjCheckNAddStates(71, 73);
                  break;
               case 8:
                  jjCheckNAddStates(71, 73);
                  break;
               case 10:
                  if ((0xffffffdfffffffffL & l) != 0L)
                     jjCheckNAddStates(71, 73);
                  break;
               case 12:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 13:
                  if (curChar == 37 && kind > 35)
                     kind = 35;
                  break;
               case 14:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 16:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAdd(17);
                  break;
               case 18:
                  if (curChar == 34)
                     jjCheckNAddStates(54, 59);
                  break;
               case 19:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(74, 76);
                  break;
               case 21:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(74, 76);
                  break;
               case 22:
                  if (curChar == 34 && kind > 27)
                     kind = 27;
                  break;
               case 23:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(77, 80);
                  break;
               case 24:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(74, 76);
                  break;
               case 25:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 27:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(81, 83);
                  break;
               case 29:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(81, 83);
                  break;
               case 30:
                  if (curChar == 34 && kind > 38)
                     kind = 38;
                  break;
               case 31:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(84, 87);
                  break;
               case 32:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(81, 83);
                  break;
               case 33:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(32);
                  break;
               case 35:
                  if (curChar == 36)
                     jjAddStates(52, 53);
                  break;
               case 38:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 39:
                  if (curChar == 36)
                     jjCheckNAddStates(49, 51);
                  break;
               case 40:
                  if ((0xffffff7affffd9ffL & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddStates(49, 51);
                  break;
               case 41:
                  if (curChar == 34)
                     jjCheckNAddStates(63, 65);
                  break;
               case 42:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(63, 65);
                  break;
               case 44:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(63, 65);
                  break;
               case 45:
                  if (curChar != 34)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddStates(49, 51);
                  break;
               case 46:
               case 48:
                  if (curChar == 39)
                     jjCheckNAddStates(60, 62);
                  break;
               case 47:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(60, 62);
                  break;
               case 50:
                  if (curChar != 39)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddStates(49, 51);
                  break;
               case 51:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(88, 91);
                  break;
               case 52:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(63, 65);
                  break;
               case 53:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 54:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(52);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAdd(4);
                  break;
               case 37:
                  if ((0xf7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     jjCheckNAddStates(49, 51);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAdd(38);
                  }
                  break;
               case 1:
                  if (kind > 3)
                     kind = 3;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAdd(4);
                  break;
               case 5:
                  if (curChar == 123)
                     jjCheckNAddStates(66, 70);
                  break;
               case 8:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(71, 73);
                  break;
               case 9:
                  if (curChar == 125)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 10:
                  jjCheckNAddStates(71, 73);
                  break;
               case 11:
                  if (curChar == 125)
                     jjAddStates(92, 93);
                  break;
               case 19:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(74, 76);
                  break;
               case 20:
                  if (curChar == 92)
                     jjAddStates(94, 96);
                  break;
               case 21:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(74, 76);
                  break;
               case 27:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(81, 83);
                  break;
               case 28:
                  if (curChar == 92)
                     jjAddStates(97, 99);
                  break;
               case 29:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(81, 83);
                  break;
               case 38:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAdd(38);
                  break;
               case 40:
                  if ((0xf7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddStates(49, 51);
                  break;
               case 42:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(63, 65);
                  break;
               case 43:
                  if (curChar == 92)
                     jjAddStates(100, 102);
                  break;
               case 44:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(63, 65);
                  break;
               case 47:
                  jjAddStates(60, 62);
                  break;
               case 49:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 37:
               case 40:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddStates(49, 51);
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 8:
               case 10:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(71, 73);
                  break;
               case 19:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(74, 76);
                  break;
               case 27:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(81, 83);
                  break;
               case 42:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(63, 65);
                  break;
               case 47:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(60, 62);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 55 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_4(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0)
{
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 10:
         return jjStartNfaWithStates_4(0, 2, 5);
      case 13:
         return jjStartNfaWithStates_4(0, 1, 5);
      case 58:
         return jjStartNfaWithStates_4(0, 34, 5);
      default :
         return jjMoveNfa_4(0, 0);
   }
}
private int jjStartNfaWithStates_4(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_4(state, pos + 1);
}
private int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 5;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  jjCheckNAddTwoStates(3, 4);
                  if ((0x100000200L & l) != 0L)
                  {
                     if (kind > 4)
                        kind = 4;
                     jjCheckNAdd(2);
                  }
                  else if (curChar == 35)
                  {
                     if (kind > 3)
                        kind = 3;
                     jjCheckNAdd(1);
                  }
                  break;
               case 5:
               case 3:
                  jjCheckNAddTwoStates(3, 4);
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(3, 4);
                  else if (curChar == 125)
                  {
                     if (kind > 43)
                        kind = 43;
                  }
                  break;
               case 5:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(3, 4);
                  else if (curChar == 125)
                  {
                     if (kind > 43)
                        kind = 43;
                  }
                  break;
               case 1:
                  if (kind > 3)
                     kind = 3;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 4:
                  if (curChar == 125 && kind > 43)
                     kind = 43;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 3:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 5:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 5 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_3(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xffc0L) != 0L)
         {
            jjmatchedKind = 42;
            return 55;
         }
         if ((active0 & 0x20L) != 0L)
            return 30;
         return -1;
      case 1:
         if ((active0 & 0x640L) != 0L)
            return 55;
         if ((active0 & 0xf980L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 1;
            }
            return 55;
         }
         if ((active0 & 0x20L) != 0L)
            return 31;
         return -1;
      case 2:
         if ((active0 & 0x8100L) != 0L)
            return 55;
         if ((active0 & 0x7a80L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 2;
            return 55;
         }
         return -1;
      case 3:
         if ((active0 & 0x800L) != 0L)
            return 55;
         if ((active0 & 0x7280L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 3;
            return 55;
         }
         return -1;
      case 4:
         if ((active0 & 0x7280L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 4;
            return 55;
         }
         return -1;
      case 5:
         if ((active0 & 0x1200L) != 0L)
            return 55;
         if ((active0 & 0x6080L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 5;
            return 55;
         }
         return -1;
      case 6:
         if ((active0 & 0x4000L) != 0L)
            return 55;
         if ((active0 & 0x2080L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 6;
            return 55;
         }
         return -1;
      case 7:
         if ((active0 & 0x80L) != 0L)
            return 55;
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 7;
            return 55;
         }
         return -1;
      case 8:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 8;
            return 55;
         }
         return -1;
      case 9:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 9;
            return 55;
         }
         return -1;
      case 10:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 10;
            return 55;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 36:
         return jjMoveStringLiteralDfa1_3(0x20L);
      case 65:
         return jjMoveStringLiteralDfa1_3(0x2000L);
      case 67:
         return jjMoveStringLiteralDfa1_3(0x80L);
      case 68:
         return jjMoveStringLiteralDfa1_3(0x4000L);
      case 69:
         return jjMoveStringLiteralDfa1_3(0x1800L);
      case 70:
         return jjMoveStringLiteralDfa1_3(0x100L);
      case 73:
         return jjMoveStringLiteralDfa1_3(0x400L);
      case 76:
         return jjMoveStringLiteralDfa1_3(0x8000L);
      case 79:
         return jjMoveStringLiteralDfa1_3(0x240L);
      default :
         return jjMoveNfa_3(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 36:
         return jjMoveStringLiteralDfa2_3(active0, 0x20L);
      case 69:
         return jjMoveStringLiteralDfa2_3(active0, 0x4000L);
      case 70:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_3(1, 10, 55);
         break;
      case 76:
         return jjMoveStringLiteralDfa2_3(active0, 0x800L);
      case 78:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 6;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_3(active0, 0x200L);
      case 79:
         return jjMoveStringLiteralDfa2_3(active0, 0x8100L);
      case 82:
         return jjMoveStringLiteralDfa2_3(active0, 0x80L);
      case 83:
         return jjMoveStringLiteralDfa2_3(active0, 0x2000L);
      case 88:
         return jjMoveStringLiteralDfa2_3(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_3(0, active0);
}
private int jjMoveStringLiteralDfa2_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa3_3(active0, 0x280L);
      case 71:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_3(2, 15, 55);
         break;
      case 80:
         return jjMoveStringLiteralDfa3_3(active0, 0x1000L);
      case 82:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_3(2, 8, 55);
         break;
      case 83:
         return jjMoveStringLiteralDfa3_3(active0, 0x6800L);
      case 123:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(2, 5);
         break;
      default :
         break;
   }
   return jjStartNfa_3(1, active0);
}
private int jjMoveStringLiteralDfa3_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_3(active0, 0x80L);
      case 69:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_3(3, 11, 55);
         break;
      case 73:
         return jjMoveStringLiteralDfa4_3(active0, 0x2000L);
      case 79:
         return jjMoveStringLiteralDfa4_3(active0, 0x1000L);
      case 84:
         return jjMoveStringLiteralDfa4_3(active0, 0x4000L);
      case 88:
         return jjMoveStringLiteralDfa4_3(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_3(2, active0);
}
private int jjMoveStringLiteralDfa4_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa5_3(active0, 0x200L);
      case 77:
         return jjMoveStringLiteralDfa5_3(active0, 0x2000L);
      case 82:
         return jjMoveStringLiteralDfa5_3(active0, 0x5000L);
      case 84:
         return jjMoveStringLiteralDfa5_3(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_3(3, active0);
}
private int jjMoveStringLiteralDfa5_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa6_3(active0, 0x80L);
      case 73:
         return jjMoveStringLiteralDfa6_3(active0, 0x2000L);
      case 79:
         return jjMoveStringLiteralDfa6_3(active0, 0x4000L);
      case 84:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_3(5, 9, 55);
         else if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_3(5, 12, 55);
         break;
      default :
         break;
   }
   return jjStartNfa_3(4, active0);
}
private int jjMoveStringLiteralDfa6_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa7_3(active0, 0x2000L);
      case 86:
         return jjMoveStringLiteralDfa7_3(active0, 0x80L);
      case 89:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_3(6, 14, 55);
         break;
      default :
         break;
   }
   return jjStartNfa_3(5, active0);
}
private int jjMoveStringLiteralDfa7_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa8_3(active0, 0x2000L);
      case 77:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_3(7, 7, 55);
         break;
      default :
         break;
   }
   return jjStartNfa_3(6, active0);
}
private int jjMoveStringLiteralDfa8_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa9_3(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_3(7, active0);
}
private int jjMoveStringLiteralDfa9_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa10_3(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_3(8, active0);
}
private int jjMoveStringLiteralDfa10_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 86:
         return jjMoveStringLiteralDfa11_3(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_3(9, active0);
}
private int jjMoveStringLiteralDfa11_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 77:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_3(11, 13, 55);
         break;
      default :
         break;
   }
   return jjStartNfa_3(10, active0);
}
private int jjStartNfaWithStates_3(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_3(state, pos + 1);
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 55;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 55:
                  if ((0xffffffeeffffd9ffL & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     jjCheckNAddStates(103, 105);
                  }
                  else if (curChar == 10)
                  {
                     if (kind > 42)
                        kind = 42;
                  }
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 0:
                  if ((0xffffffeeffffd9ffL & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     jjCheckNAddStates(103, 105);
                  }
                  else if ((0x100000200L & l) != 0L)
                  {
                     if (kind > 4)
                        kind = 4;
                     jjCheckNAdd(2);
                  }
                  else if (curChar == 36)
                     jjAddStates(106, 108);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     jjCheckNAdd(24);
                  }
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 27;
                  else if (curChar == 34)
                     jjCheckNAddStates(10, 12);
                  else if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if (curChar == 35)
                  {
                     if (kind > 3)
                        kind = 3;
                     jjCheckNAdd(1);
                  }
                  break;
               case 31:
                  if ((0xffffff7affffd9ffL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     jjCheckNAddStates(49, 51);
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(60, 62);
                  else if (curChar == 34)
                     jjCheckNAddStates(63, 65);
                  break;
               case 30:
                  if ((0xffffffefffffffffL & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     jjCheckNAddStates(103, 105);
                  }
                  else if (curChar == 36)
                     jjCheckNAddStates(49, 51);
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 37;
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAdd(2);
                  break;
               case 4:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(22, 26);
                  break;
               case 5:
                  if (curChar == 10)
                     jjCheckNAddStates(27, 29);
                  break;
               case 6:
                  jjCheckNAddStates(27, 29);
                  break;
               case 8:
                  if ((0xffffffdfffffffffL & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 10:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 11:
                  if (curChar == 37 && kind > 35)
                     kind = 35;
                  break;
               case 12:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 14:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 34)
                     jjCheckNAddStates(10, 12);
                  break;
               case 16:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 18:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 19:
                  if (curChar == 34 && kind > 38)
                     kind = 38;
                  break;
               case 20:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(30, 33);
                  break;
               case 21:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 22:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(21);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAdd(24);
                  break;
               case 25:
                  if ((0xffffffeeffffd9ffL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAddStates(103, 105);
                  break;
               case 26:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if ((0xffffffefffffffffL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAddStates(103, 105);
                  break;
               case 28:
                  if (curChar == 10 && kind > 42)
                     kind = 42;
                  break;
               case 29:
                  if (curChar == 36)
                     jjAddStates(106, 108);
                  break;
               case 32:
                  if ((0x3ff400000000000L & l) != 0L)
                     jjCheckNAddStates(109, 111);
                  break;
               case 33:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(33, 34);
                  break;
               case 34:
                  if (curChar != 61)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAdd(35);
                  break;
               case 35:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAdd(35);
                  break;
               case 36:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 38:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 39:
                  if (curChar == 36)
                     jjCheckNAddStates(49, 51);
                  break;
               case 40:
                  if ((0xffffff7affffd9ffL & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddStates(49, 51);
                  break;
               case 41:
                  if (curChar == 34)
                     jjCheckNAddStates(63, 65);
                  break;
               case 42:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(63, 65);
                  break;
               case 44:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(63, 65);
                  break;
               case 45:
                  if (curChar != 34)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddStates(49, 51);
                  break;
               case 46:
               case 48:
                  if (curChar == 39)
                     jjCheckNAddStates(60, 62);
                  break;
               case 47:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(60, 62);
                  break;
               case 50:
                  if (curChar != 39)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddStates(49, 51);
                  break;
               case 51:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(88, 91);
                  break;
               case 52:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(63, 65);
                  break;
               case 53:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 54:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(52);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 55:
               case 25:
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAddStates(103, 105);
                  break;
               case 0:
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAddStates(103, 105);
                  break;
               case 31:
                  if ((0xf7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     jjCheckNAddStates(49, 51);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAdd(38);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(109, 111);
                  break;
               case 30:
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAddStates(103, 105);
                  break;
               case 1:
                  if (kind > 3)
                     kind = 3;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (curChar == 123)
                     jjCheckNAddStates(22, 26);
                  break;
               case 6:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 7:
                  if (curChar == 125)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 8:
                  jjCheckNAddStates(27, 29);
                  break;
               case 9:
                  if (curChar == 125)
                     jjAddStates(41, 42);
                  break;
               case 16:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 17:
                  if (curChar == 92)
                     jjAddStates(43, 45);
                  break;
               case 18:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 32:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(109, 111);
                  break;
               case 37:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAdd(38);
                  break;
               case 38:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAdd(38);
                  break;
               case 40:
                  if ((0xf7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddStates(49, 51);
                  break;
               case 42:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(63, 65);
                  break;
               case 43:
                  if (curChar == 92)
                     jjAddStates(100, 102);
                  break;
               case 44:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(63, 65);
                  break;
               case 47:
                  jjAddStates(60, 62);
                  break;
               case 49:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 55:
               case 25:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAddStates(103, 105);
                  break;
               case 0:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAddStates(103, 105);
                  break;
               case 31:
               case 40:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddStates(49, 51);
                  break;
               case 30:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAddStates(103, 105);
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 6:
               case 8:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 16:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(10, 12);
                  break;
               case 42:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(63, 65);
                  break;
               case 47:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(60, 62);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 55 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   29, 35, 38, 60, 65, 74, 84, 95, 107, 108, 16, 17, 19, 39, 40, 45, 
   46, 48, 49, 41, 42, 44, 4, 5, 6, 7, 9, 6, 7, 9, 16, 17, 
   21, 19, 31, 32, 33, 41, 42, 51, 44, 10, 12, 18, 20, 22, 43, 50, 
   52, 40, 41, 46, 36, 39, 19, 20, 22, 27, 28, 30, 47, 49, 50, 42, 
   43, 45, 6, 7, 8, 9, 11, 8, 9, 11, 19, 20, 22, 19, 20, 24, 
   22, 27, 28, 30, 27, 28, 32, 30, 42, 43, 52, 45, 12, 14, 21, 23, 
   25, 29, 31, 33, 44, 51, 53, 25, 26, 28, 30, 36, 39, 32, 33, 34, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\117\116", 
"\103\122\105\101\124\105\126\115", "\106\117\122", "\117\116\105\130\111\124", "\111\106", "\105\114\123\105", 
"\105\130\120\117\122\124", "\101\123\123\111\115\111\114\101\124\105\126\115", 
"\104\105\123\124\122\117\131", "\114\117\107", null, null, null, null, null, null, null, null, null, null, 
null, null, "\133", null, null, null, "\54", "\135", "\72", null, null, null, null, 
null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "fileListProcessing",
   "DEFAULT",
   "argProcessing",
   "passThruProcessing",
   "wrappedExpressionProcessing",
   "expressionProcessing",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 2, -1, -1, 1, 
   -1, -1, 1, 0, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1, 3, -1, -1, 1, 
};
static final long[] jjtoToken = {
   0xdff3931ffc1L, 
};
static final long[] jjtoSkip = {
   0x3eL, 
};
static final long[] jjtoSpecial = {
   0x10L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[111];
private final int[] jjstateSet = new int[222];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public ShellTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ShellTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 111; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 6 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 1;
int defaultLexState = 1;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 13 && (0x2400L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       try { input_stream.backup(0);
          while (curChar <= 13 && (0x2400L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       try { input_stream.backup(0);
          while (curChar <= 13 && (0x2400L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
     case 3:
       try { input_stream.backup(0);
          while (curChar <= 13 && (0x2400L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_3();
       break;
     case 4:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_4();
       break;
     case 5:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_5();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
           }
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 16 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                                                   String s = image.toString().trim(); matchedToken.image = s.substring(2, s.length()-1).trim();
         break;
      case 20 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                                                                     String ss = image.toString(); matchedToken.image = ss.substring(2);
         break;
      case 21 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                         matchedToken.image = image.toString().substring(2);
         break;
      case 27 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                              matchedToken.image = image.toString() ;
                                                                          matchedToken.image = n3phele.service.n.helpers.StringEscapeUtils.unescapeJavaString(matchedToken.image.substring(1,matchedToken.image.length()-1));
         break;
      case 35 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                String sss = image.toString();
            int i, j;
            for(j = 3; j < sss.length() && (sss.charAt(j) == ' ' || sss.charAt(j) == '\u005ct'); j++) ;
            if(j < sss.length() && sss.charAt(j) == '\u005cn') j++;
            for(i = sss.length()-4; i > 0 && (sss.charAt(i) == ' ' || sss.charAt(i) == '\u005ct'); i--) ;
            if(i > 0 && sss.charAt(i) == '\u005cn') i++;
            sss = sss.substring(j, i+1);
            StringBuffer b = new StringBuffer();
            boolean skipToEnd = false;
            for(int p=0; p < sss.length(); p++) {
                char c = sss.charAt(p);
                if(skipToEnd) {
                        if(c == '\u005cn') {
                                skipToEnd = false;
                        }
                } else {
                        if(c == ' ' || c == '\u005ct')
                                continue;
                        skipToEnd = true;

                }
                b.append(c);
            }
            matchedToken.image = b.toString();
         break;
      case 43 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                         matchedToken.image = image.toString().substring(0, image.toString().length()-1);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
