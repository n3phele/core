/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Expression.jj */
/*@egen*/options{  static = false;                                                                                        }PARSER_BEGIN(Expression)package n3phele.service.nShell;import java.util.HashMap;import java.util.Map;
/** * (C) Copyright 2010-2013. Nigel Cook. All rights reserved. * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER. *  * Licensed under the terms described in LICENSE file that accompanied this code, (the "License"); you may not use this file * except in compliance with the License.  *  *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on  *  an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the  *  specific language governing permissions and limitations under the License. */
public class Expression/*@bgen(jjtree)*/implements ExpressionTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTExpressionState jjtree = new JJTExpressionState();

/*@egen*/
	public Expression(String s, int lineNo, int columnNo)	{		jj_input_stream = new SimpleCharStream(new java.io.StringReader(s), lineNo, columnNo);        jj_input_stream.setTabSize(4);        token_source = new ExpressionTokenManager(jj_input_stream);        token = new Token();        jj_ntk = -1;        jj_gen = 0;        for (int i = 0; i < 5; i++) jj_la1[i] = -1;	}	public void reInit(String s, int lineNo, int columnNo)	{	  	jj_input_stream.ReInit(new java.io.StringReader(s), lineNo, columnNo);	    token_source.ReInit(jj_input_stream);	    token = new Token();	    jj_ntk = -1;	    jjtree.reset();	    jj_gen = 0;	    for (int i = 0; i < 20; i++) jj_la1[i] = -1;	}}PARSER_END(Expression)SKIP :{     "\r"  |  " "  |  "\t"  |  "\n"  | < COMMENT: "#" (~["\n"])* >}// ----------------- Expression -------------------------------TOKEN : {    < REGEX: "$$regex(" >  | < MAX: "$$max(" >  | < MIN: "$$min(" >  | < LENGTH: "$$length(" >  | < ESCAPE: "$$escape(" >  | < UNESCAPE: "$$unescape(" >  | < STRING: "$$string(" >  | <  TRUE: "true" >  | <  FALSE: "false" >}TOKEN : { <INTEGER_LITERAL: <DECIMAL_LITERAL> | <HEX_LITERAL> | <OCTAL_LITERAL> >|  <#DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])*>|  <#HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+>|  <#OCTAL_LITERAL: "0" (["0"-"7"])*>|  <FLOATING_POINT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])? | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])? | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])? | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]>|  <#EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+>|  <STRING_LITERAL: "\"" ( ~["\"","\\"] | "\\" ( ["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])?  | ["0"-"3"] ["0"-"7"] ["0"-"7"] ))* "\"">}TOKEN : { <IDENTIFIER: "$$" <VARSTART> ( < VARREST > | ".")* >   | < #VARSTART: ["A"-"Z", "a"-"z"] >  | < #VARREST:  ["A"-"Z", "a"-"z", "0"-"9", "_"] >  | < #WHITESPACE: " " | "\t" >}void functionExpression() : {/*@bgen(jjtree) functionExpression */
  SelfCompilingNode jjtn000 = (SelfCompilingNode)n3phele.service.nShell.ExpressionNode.jjtCreate(JJTFUNCTIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }{/*@bgen(jjtree) functionExpression */
        try {
/*@egen*/	(     < REGEX > conditionalExpression() "," conditionalExpression() "," conditionalExpression() ")"/*@bgen(jjtree)*/
                                                                                                            {
                                                                                                              jjtree.closeNodeScope(jjtn000, true);
                                                                                                              jjtc000 = false;
                                                                                                            }
/*@egen*/ { jjtn000.jjtSetValue("regex"); }			| < MAX > conditionalExpression() "," conditionalExpression() ")"/*@bgen(jjtree)*/
                                                                                  {
                                                                                    jjtree.closeNodeScope(jjtn000, true);
                                                                                    jjtc000 = false;
                                                                                  }
/*@egen*/ { jjtn000.jjtSetValue("max"); }		| < MIN > conditionalExpression() "," conditionalExpression() ")"/*@bgen(jjtree)*/
                                                                                  {
                                                                                    jjtree.closeNodeScope(jjtn000, true);
                                                                                    jjtc000 = false;
                                                                                  }
/*@egen*/ { jjtn000.jjtSetValue("min"); }		| < LENGTH > conditionalExpression() ")"/*@bgen(jjtree)*/
                                                         {
                                                           jjtree.closeNodeScope(jjtn000, true);
                                                           jjtc000 = false;
                                                         }
/*@egen*/ { jjtn000.jjtSetValue("length"); }	    | < STRING > conditionalExpression() "," conditionalExpression() "," conditionalExpression() ")"/*@bgen(jjtree)*/
                                                                                                             {
                                                                                                               jjtree.closeNodeScope(jjtn000, true);
                                                                                                               jjtc000 = false;
                                                                                                             }
/*@egen*/ { jjtn000.jjtSetValue("string"); }		| < ESCAPE > conditionalExpression() ")"/*@bgen(jjtree)*/
                                                         {
                                                           jjtree.closeNodeScope(jjtn000, true);
                                                           jjtc000 = false;
                                                         }
/*@egen*/ { jjtn000.jjtSetValue("escape"); }		| < UNESCAPE > conditionalExpression() ")"/*@bgen(jjtree)*/
                                                           {
                                                             jjtree.closeNodeScope(jjtn000, true);
                                                             jjtc000 = false;
                                                           }
/*@egen*/ { jjtn000.jjtSetValue("unescape"); }	)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}SelfCompilingNode buildExpressionTree()       : { SimpleNode t; }{  (  	t = conditionalExpression() < EOF>  )  {    return (SelfCompilingNode) t;  }}SimpleNode conditionalExpression() : {/*@bgen(jjtree) conditionalExpression */
                                       SelfCompilingNode jjtn000 = (SelfCompilingNode)n3phele.service.nShell.ExpressionNode.jjtCreate(JJTCONDITIONALEXPRESSION);
                                       boolean jjtc000 = true;
                                       jjtree.openNodeScope(jjtn000);
/*@egen*/ jjtn000.isNoop(); }{/*@bgen(jjtree) conditionalExpression */
        try {
/*@egen*/	(	  logicalORExpression() [ "?" conditionalExpression() ":" conditionalExpression() ]	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/	{	  return jjtn000;	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void logicalORExpression() : {/*@bgen(jjtree) logicalORExpression */
                               SelfCompilingNode jjtn000 = (SelfCompilingNode)n3phele.service.nShell.ExpressionNode.jjtCreate(JJTLOGICALOREXPRESSION);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);
/*@egen*/ jjtn000.isNoop(); }{/*@bgen(jjtree) logicalORExpression */
        try {
/*@egen*/	logicalANDExpression() [ "|" logicalORExpression() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void logicalANDExpression() : {/*@bgen(jjtree) logicalANDExpression */
                                SelfCompilingNode jjtn000 = (SelfCompilingNode)n3phele.service.nShell.ExpressionNode.jjtCreate(JJTLOGICALANDEXPRESSION);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);
/*@egen*/ jjtn000.isNoop(); }{/*@bgen(jjtree) logicalANDExpression */
        try {
/*@egen*/	equalityExpression() [ "&" logicalANDExpression() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void equalityExpression() : {/*@bgen(jjtree) equalityExpression */
                              SelfCompilingNode jjtn000 = (SelfCompilingNode)n3phele.service.nShell.ExpressionNode.jjtCreate(JJTEQUALITYEXPRESSION);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);
/*@egen*/ String op; jjtn000.isNoop(); }{/*@bgen(jjtree) equalityExpression */
        try {
/*@egen*/	relationalExpression() [ 	( "==" 								{ jjtn000.jjtSetValue("=="); }	| "!=" 								{ jjtn000.jjtSetValue("!="); }	) equalityExpression() 				]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void relationalExpression() : {/*@bgen(jjtree) relationalExpression */
                               SelfCompilingNode jjtn000 = (SelfCompilingNode)n3phele.service.nShell.ExpressionNode.jjtCreate(JJTRELATIONALEXPRESSION);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);
/*@egen*/String op; jjtn000.isNoop(); }{/*@bgen(jjtree) relationalExpression */
        try {
/*@egen*/	additiveExpression() [ 	( "<"										{ jjtn000.jjtSetValue("<"); } 	| ">"										{ jjtn000.jjtSetValue(">"); } 	| "<="										{ jjtn000.jjtSetValue("<="); }	| ">="										{ jjtn000.jjtSetValue(">="); }	) relationalExpression() 						]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void additiveExpression() : {/*@bgen(jjtree) additiveExpression */
                              SelfCompilingNode jjtn000 = (SelfCompilingNode)n3phele.service.nShell.ExpressionNode.jjtCreate(JJTADDITIVEEXPRESSION);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);
/*@egen*/ Token op; jjtn000.isNoop(); }{/*@bgen(jjtree) additiveExpression */
        try {
/*@egen*/	multiplicativeExpression() 		[ ( op = "+" | op = "-" )  additiveExpression() 	{	  jjtn000.jjtSetValue(op.image);	}]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void multiplicativeExpression() : {/*@bgen(jjtree) multiplicativeExpression */
                                    SelfCompilingNode jjtn000 = (SelfCompilingNode)n3phele.service.nShell.ExpressionNode.jjtCreate(JJTMULTIPLICATIVEEXPRESSION);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);
/*@egen*/ jjtn000.isNoop(); }{/*@bgen(jjtree) multiplicativeExpression */
        try {
/*@egen*/	unaryExpression() [ 	       ( "*"			{ jjtn000.jjtSetValue("*"); }	       | "/" 			{ jjtn000.jjtSetValue("/"); }	       | "%" 			{ jjtn000.jjtSetValue("%"); }	       )	       multiplicativeExpression()			  ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void unaryExpression() : {/*@bgen(jjtree) unaryExpression */
                           SelfCompilingNode jjtn000 = (SelfCompilingNode)n3phele.service.nShell.ExpressionNode.jjtCreate(JJTUNARYEXPRESSION);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/ jjtn000.isNoop(); Token t; }{/*@bgen(jjtree) unaryExpression */
        try {
/*@egen*/	(       primaryExpression() [  listIndexExpression() ]	| ( t = unaryOperator() unaryExpression()/*@bgen(jjtree)*/
                                                  {
                                                    jjtree.closeNodeScope(jjtn000, true);
                                                    jjtc000 = false;
                                                  }
/*@egen*/ { jjtn000.jjtSetValue(t.image); jjtn000.notNoop();} )	)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}Token unaryOperator()       : {Token t;}{	( t = "+" 	| t = "-" 	| t = "~"	| t = "!"	)	{	  return t;	}}void primaryExpression()       : {  }{	(    constant()	  | "(" conditionalExpression() ")"		  | functionExpression()	  | identifier()	)}void listIndexExpression()       : {  }{	 "[" conditionalExpression() [ "," conditionalExpression() ]  "]"} void identifier() : {/*@bgen(jjtree) identifier */
                      SelfCompilingNode jjtn000 = (SelfCompilingNode)n3phele.service.nShell.ExpressionNode.jjtCreate(JJTIDENTIFIER);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }{/*@bgen(jjtree) identifier */
  try {
/*@egen*/  (      t = < IDENTIFIER >  )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/	{	  jjtn000.jjtSetValue(t.image.substring(2));	}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void constant() : {/*@bgen(jjtree) constant */
                   SelfCompilingNode jjtn000 = (SelfCompilingNode)n3phele.service.nShell.ExpressionNode.jjtCreate(JJTCONSTANT);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) constant */
        try {
/*@egen*/ 	( 	  t = <INTEGER_LITERAL>/*@bgen(jjtree)*/
                                                {
                                                  jjtree.closeNodeScope(jjtn000, true);
                                                  jjtc000 = false;
                                                }
/*@egen*/ 		{ jjtn000.jjtSetValue(Long.decode(t.image)); }  	| t = <STRING_LITERAL>/*@bgen(jjtree)*/
                                                {
                                                  jjtree.closeNodeScope(jjtn000, true);
                                                  jjtc000 = false;
                                                }
/*@egen*/  		{ jjtn000.jjtSetValue(t.image.substring(1,t.image.length()-1)); } 	| t = <FLOATING_POINT_LITERAL>/*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
                                        }
/*@egen*/  { jjtn000.jjtSetValue(Double.valueOf(t.image)); } 	| < TRUE >/*@bgen(jjtree)*/
                                                                {
                                                                  jjtree.closeNodeScope(jjtn000, true);
                                                                  jjtc000 = false;
                                                                }
/*@egen*/ 						{ jjtn000.jjtSetValue(Boolean.valueOf(true)); } 	| < FALSE >/*@bgen(jjtree)*/
                                                        {
                                                          jjtree.closeNodeScope(jjtn000, true);
                                                          jjtc000 = false;
                                                        }
/*@egen*/ 					{ jjtn000.jjtSetValue(Boolean.valueOf(false)); }  	)/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}// -------------------------------------------------------